		// ===============================|  RSR  |===============================
		//		Version: 1.1.5
		//		Build Date: 20-April-21
		//		Author: Kuma @ hbanz
		//		Website: hbanz.org/realsoccer
		//		* Real Soccer Revolution (RSR)
		//      Changelog:
		//		1.0 Official Release
		//		1.1 Powershot mode added with toggle (credit to Winky)
		//           
		// =========================================================================

		// =========================================================================
		// Usefull Links
		// ------------------------------------------------
		// https://www.haxball.com/headless
		// https://github.com/haxball/haxball-issues/wiki/Headless-Host
		// https://www.haxball.com/headlesstoken
		// https://www.haxball.com/playerauth
		// =========================================================================


		//Real Soccer Variables
		var throwTimeOut = 420; // 7 seconds (var is in game ticks)
		var gkTimeOut = 600; // 10 seconds (var is in game ticks)
		var ckTimeOut = 600; // 10 seconds (var is in game ticks)
		var throwinDistance = 270; // distance players can move the ball during throw in
		var mapBGColor = "86A578"; // default 718C5A
		var superAdminCode = "cuong"; // !admin 505050
		var allowPublicAdmin = false; // if true then !admin command is enabled
		var powerShotMode = true;
		var bikick = [];
		var votekickdangdienra = false;
		var kick_count = 0;
		var nonkick_count = 0;
		var davote = [];
		var ids = [];
		var admincontrol = false;
		var logged = [];

		/*-------------------------------- STADIUMS ---------------------------------*/
		function getRealSoccerMap() {
			var realSoccerMap = `{

	"name" : "Map",

	"width" : 1500,

	"height" : 900,

	"spawnDistance" : 560,

	"bg" : { "type" : "grass", "width" : 1150, "height" : 600, "kickOffRadius" : 180, "cornerRadius" : 0, "color" : "`+mapBGColor+`" },

	"playerPhysics" : {
		"radius" : 12,
		"bCoef" : 0.5,
		"invMass" : 0.5,
		"damping" : 0.96,
		"acceleration" : 0.1011,
		"kickingAcceleration" : 0.07,
		"kickingDamping" : 0.95,
		"kickStrength" : 5.65

	},

	"ballPhysics" : {
		"radius" : 6.5,
		"bCoef" : 0.5,
		"invMass" : 1.05,
		"damping" : 0.9857,
		"color" : "FFA326",
		"cMask" : [ "all"
		],
		"cGroup" : [ "ball"
		]

	},

	"vertexes" : [
		/* 0 */ { "x" : 0, "y" : 879, "trait" : "kickOffBarrier" },
		/* 1 */ { "x" : 0, "y" : 180, "trait" : "kickOffBarrier" },
		/* 2 */ { "x" : 0, "y" : -180, "trait" : "kickOffBarrier" },
		
		/* 3 */ { "x" : 1150, "y" : 320, "trait" : "line" },
		/* 4 */ { "x" : 740, "y" : 322, "trait" : "line" },
		/* 5 */ { "x" : 1150, "y" : -320, "trait" : "line" },
		/* 6 */ { "x" : 738, "y" : -317, "trait" : "line" },
		/* 7 */ { "x" : 1150, "y" : 180, "trait" : "line" },
		/* 8 */ { "x" : 1030, "y" : 180, "trait" : "line" },
		/* 9 */ { "x" : 1150, "y" : -180, "trait" : "line" },
		/* 10 */ { "x" : 1030, "y" : -180, "trait" : "line" },
		/* 11 */ { "x" : 738, "y" : -132, "trait" : "line", "curve" : -130 },
		/* 12 */ { "x" : 741, "y" : 134, "trait" : "line", "curve" : -130 },
		/* 13 */ { "x" : -1150, "y" : -320, "trait" : "line" },
		/* 14 */ { "x" : -741, "y" : -320, "trait" : "line" },
		/* 15 */ { "x" : -1150, "y" : 320, "trait" : "line" },
		/* 16 */ { "x" : -740, "y" : 318, "trait" : "line" },
		/* 17 */ { "x" : -1150, "y" : -175, "trait" : "line" },
		/* 18 */ { "x" : -1030, "y" : -175, "trait" : "line" },
		/* 19 */ { "x" : -1150, "y" : 175, "trait" : "line" },
		/* 20 */ { "x" : -1030, "y" : 175, "trait" : "line" },
		/* 21 */ { "x" : -740, "y" : 132, "trait" : "line", "curve" : -130 },
		/* 22 */ { "x" : -741, "y" : -129, "trait" : "line", "curve" : -130 },
		/* 23 */ { "x" : 875, "y" : 4, "trait" : "line" },
		/* 24 */ { "x" : 884, "y" : 5, "trait" : "line" },
		/* 25 */ { "x" : -1150, "y" : 570, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 26 */ { "x" : -1120, "y" : 600, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 27 */ { "x" : -1120, "y" : -600, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 28 */ { "x" : -1150, "y" : -570, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 29 */ { "x" : 1120, "y" : 600, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 30 */ { "x" : 1150, "y" : 570, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 31 */ { "x" : 1150, "y" : -570, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		/* 32 */ { "x" : 1120, "y" : -600, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		/* 33 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier", "curve" : -180 },
		/* 34 */ { "x" : 0, "y" : -180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180 },
		/* 35 */ { "x" : 0, "y" : 180, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier", "curve" : 180 },
		
		/* 36 */ { "x" : -1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 37 */ { "x" : -1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : 70, "color" : "576C46", "vis" : false },
		/* 38 */ { "x" : 1030, "y" : -40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 39 */ { "x" : 1030, "y" : 40, "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "curve" : -70, "color" : "576C46", "vis" : false },
		/* 40 */ { "x" : 1030, "y" : -40, "trait" : "line", "color" : "576C46" },
		/* 41 */ { "x" : 1030, "y" : 40, "trait" : "line", "color" : "576C46" },
		/* 42 */ { "x" : -1030, "y" : -40, "trait" : "line", "color" : "576C46" },
		/* 43 */ { "x" : -1030, "y" : 40, "trait" : "line", "color" : "576C46" },
		/* 44 */ { "x" : 0, "y" : 3, "trait" : "line" },
		/* 45 */ { "x" : 0, "y" : -3, "trait" : "line" },
		
		/* 46 */ { "x" : -1300, "y" : -460, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 47 */ { "x" : 1300, "y" : -460, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 48 */ { "x" : -1300, "y" : 460, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 49 */ { "x" : 1300, "y" : 460, "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "color" : "ec644b", "vis" : false },
		/* 50 */ { "x" : -1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 51 */ { "x" : -500, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 52 */ { "x" : -500, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 53 */ { "x" : -1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 54 */ { "x" : 1295, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 55 */ { "x" : 500, "y" : -320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 56 */ { "x" : 500, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 57 */ { "x" : 1295, "y" : 320, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		/* 58 */ { "x" : -1149, "y" : -102, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ] },
		/* 59 */ { "x" : -1211, "y" : -103, "bCoef" : 0.1, "cMask" : ["red","blue" ], "bias" : 0, "curve" : 5 },
		/* 60 */ { "x" : -1150, "y" : 103, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ] },
		/* 61 */ { "x" : -1209, "y" : 103, "bCoef" : 0.1, "cMask" : ["red","blue" ], "bias" : 0, "curve" : 5 },
		/* 62 */ { "x" : -1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 63 */ { "x" : -1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 64 */ { "x" : 1152, "y" : 101, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ] },
		/* 65 */ { "x" : 1214, "y" : 101, "bCoef" : 0.1, "cMask" : ["red","blue" ], "curve" : -5 },
		/* 66 */ { "x" : 1150, "y" : -102, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ] },
		/* 67 */ { "x" : 1211, "y" : -104, "bCoef" : 0.1, "cMask" : ["red","blue" ], "curve" : -5 },
		/* 68 */ { "x" : 1250, "y" : -158, "bCoef" : 0, "cMask" : ["ball" ] },
		/* 69 */ { "x" : 1250, "y" : 158, "bCoef" : 0, "cMask" : ["ball" ] },
		
		/* 70 */ { "x" : -893, "y" : -4, "trait" : "line" },
		/* 71 */ { "x" : -884, "y" : -3, "trait" : "line" },
		
		/* 72 */ { "x" : -78.39996337890625, "y" : 678.1999999880791 },
		/* 73 */ { "x" : -78.39996337890625, "y" : 800.1999999880791 },
		/* 74 */ { "x" : -266.39996337890625, "y" : 798.1999999880791 },
		/* 75 */ { "x" : -265.39996337890625, "y" : 677.1999999880791 },
		/* 76 */ { "x" : -244.39996337890625, "y" : 691.1999999880791 },
		/* 77 */ { "x" : -107.39996337890625, "y" : 692.1999999880791 },
		/* 78 */ { "x" : 267.60003662109375, "y" : 677.1999999880791 },
		/* 79 */ { "x" : 268.60003662109375, "y" : 799.1999999880791 },
		/* 80 */ { "x" : 82.60003662109375, "y" : 798.1999999880791 },
		/* 81 */ { "x" : 81.60003662109375, "y" : 676.1999999880791 },
		/* 82 */ { "x" : 110.60003662109375, "y" : 693.1999999880791 },
		/* 83 */ { "x" : 245.60003662109375, "y" : 694.1999999880791 },
		/* 84 */ { "x" : 269.20001220703125, "y" : 737.2000732421875, "color" : "ff0000" },
		/* 85 */ { "x" : 1302.606201171875, "y" : 737.6312255859375, "color" : "ff0000" },
		/* 86 */ { "x" : -267.5937490463257, "y" : 733.6312255859375, "color" : "fff000" },
		/* 87 */ { "x" : -1300.5937490463257, "y" : 732.6312255859375, "color" : "fff000" },
		/* 88 */ { "x" : 1298.8062133789062, "y" : -709.3687438964844 },
		/* 89 */ { "x" : -1298.193748474121, "y" : -727.3687438964844 },
		/* 90 */ { "x" : 1300.606201171875, "y" : -724.3687438964846 },
		/* 91 */ { "x" : -1231, "y" : 96.79998779296875 },
		/* 92 */ { "x" : -1203, "y" : 91.79998779296875 },
		/* 93 */ { "x" : -1231, "y" : -102.20001220703125 },
		/* 94 */ { "x" : -1207, "y" : -89.20001220703125 },
		/* 95 */ { "x" : 1229.800048828125, "y" : -100.20001220703125 },
		/* 96 */ { "x" : 1205.800048828125, "y" : -88.20001220703125 },
		/* 97 */ { "x" : 1228.800048828125, "y" : 90.79998779296875 },
		/* 98 */ { "x" : 1203.800048828125, "y" : 85.79998779296875 },
		/* 99 */ { "x" : -1299, "y" : -734.4000015258789 },
		/* 100 */ { "x" : -1200, "y" : 84 },
		/* 101 */ { "x" : -1206, "y" : 85 },
		/* 102 */ { "x" : -1201, "y" : 85 },
		/* 103 */ { "x" : -1201, "y" : 92 },
		/* 104 */ { "x" : 1231.1524259377543, "y" : 686.0345586556042 },
		/* 105 */ { "x" : 1260.7962076212261, "y" : 706.4856272707809 },
		/* 106 */ { "x" : 1269.4372183824346, "y" : 692.9825560266278 },
		/* 107 */ { "x" : 1239.793436698963, "y" : 672.5314874114508 },
		/* 108 */ { "x" : 1260.9734926065385, "y" : 721.4845795686578 },
		/* 109 */ { "x" : 1282.979537270543, "y" : 688.0221529046239 },
		/* 110 */ { "x" : 1264.7131952408474, "y" : 699.4388402023551 },
		/* 111 */ { "x" : 1268.748372850677, "y" : 702.3913546658473 },
		/* 112 */ { "x" : 1233.4553425134438, "y" : 677.8067658017816 },
		/* 113 */ { "x" : 1266.4454562749875, "y" : 710.6191475196699 },
		/* 114 */ { "x" : 1274.5158114946466, "y" : 716.5241764466539 },
		/* 115 */ { "x" : 1276.1100351874295, "y" : 699.1041175828793 },
		/* 116 */ { "x" : 1282.7828519924244, "y" : 705.2256791391311 },
		/* 117 */ { "x" : 1291.4829577487371, "y" : 696.7222586609367 },
		/* 118 */ { "x" : 1281.4444085728642, "y" : 710.4418625343574 },
		/* 119 */ { "x" : 7.453032989332655, "y" : -665.7820388066623 },
		/* 120 */ { "x" : 8.545680775262781, "y" : -701.7793459395009 },
		/* 121 */ { "x" : -7.485390289784448, "y" : -701.7103495091422 },
		/* 122 */ { "x" : -8.578038075714858, "y" : -665.7130423763037 },
		/* 123 */ { "x" : 21.048162313267483, "y" : -710.0671656402336 },
		/* 124 */ { "x" : -19.0004742439437, "y" : -710.3938304660321 },
		/* 125 */ { "x" : 0.5011041373319358, "y" : -701.2456918226268 },
		/* 126 */ { "x" : 0.791515191404244, "y" : -706.2372508395747 },
		/* 127 */ { "x" : -0.7077080702271132, "y" : -663.2517610830092 },
		/* 128 */ { "x" : 8.95225625096407, "y" : -708.7675285632278 },
		/* 129 */ { "x" : 9.533078359108345, "y" : -718.7506465971233 },
		/* 130 */ { "x" : -5.964338589064994, "y" : -710.6370735288338 },
		/* 131 */ { "x" : -4.4432868883453125, "y" : -719.5637975485255 },
		/* 132 */ { "x" : -16.306864107391164, "y" : -722.2574076850777 },
		/* 133 */ { "x" : 0.6644365502311871, "y" : -721.2700101012322 },
		/* 134 */ { "x" : -1237.310015867045, "y" : -686.7132514243191 },
		/* 135 */ { "x" : -1266.0950875474944, "y" : -708.3562560297661 },
		/* 136 */ { "x" : -1275.279599670651, "y" : -695.2168216028363 },
		/* 137 */ { "x" : -1246.4945279902017, "y" : -673.573816997389 },
		/* 138 */ { "x" : -1265.6605288222036, "y" : -723.3499599989085 },
		/* 139 */ { "x" : -1289.012950061433, "y" : -690.8128362436408 },
		/* 140 */ { "x" : -1270.2962026777345, "y" : -701.4750765042438 },
		/* 141 */ { "x" : -1274.2076119911144, "y" : -704.5896996248166 },
		/* 142 */ { "x" : -1239.9465672719334, "y" : -678.5862226505678 },
		/* 143 */ { "x" : -1271.571060586226, "y" : -712.716728398568 },
		/* 144 */ { "x" : -1279.3938792129857, "y" : -718.9459746397131 },
		/* 145 */ { "x" : -1281.6972118106198, "y" : -701.605425082543 },
		/* 146 */ { "x" : -1288.114823950589, "y" : -707.9940285622498 },
		/* 147 */ { "x" : -1297.1544831653152, "y" : -699.8524954583672 },
		/* 148 */ { "x" : -1286.5647645553681, "y" : -713.1512871238585 },
		/* 149 */ { "x" : -1251.0350886884692, "y" : 674.6898663669941 },
		/* 150 */ { "x" : -1280.3525610820539, "y" : 695.606027880317 },
		/* 151 */ { "x" : -1270.5954487913375, "y" : 708.3260420212821 },
		/* 152 */ { "x" : -1241.2779763977528, "y" : 687.4098805079594 },
		/* 153 */ { "x" : -1294.5168468292964, "y" : 690.6691250789183 },
		/* 154 */ { "x" : -1270.5390025588213, "y" : 722.7481366618965 },
		/* 155 */ { "x" : -1275.0590684803801, "y" : 701.6870587202345 },
		/* 156 */ { "x" : -1279.208433043535, "y" : 704.476821025886 },
		/* 157 */ { "x" : -1244.0818502615336, "y" : 679.6549922846509 },
		/* 158 */ { "x" : -1286.1616714704705, "y" : 699.5116951082292 },
		/* 159 */ { "x" : -1294.4604005967801, "y" : 705.0912197195325 },
		/* 160 */ { "x" : -1278.6222574661465, "y" : 712.5177412588241 },
		/* 161 */ { "x" : -1286.6490661409557, "y" : 716.709440496366 },
		/* 162 */ { "x" : -1281.6133824326537, "y" : 727.7838203701983 },
		/* 163 */ { "x" : -1291.098574271869, "y" : 713.6759808554718 },
		/* 164 */ { "x" : 1258.515927619987, "y" : -665.699033206944 },
		/* 165 */ { "x" : 1284.2893951914405, "y" : -690.8531257038567 },
		/* 166 */ { "x" : 1272.7015920132233, "y" : -701.9311588100943 },
		/* 167 */ { "x" : 1246.9281244417698, "y" : -676.7770663131819 },
		/* 168 */ { "x" : 1299.042114292005, "y" : -688.1406952181401 },
		/* 169 */ { "x" : 1270.4399922080925, "y" : -716.174935216702 },
		/* 170 */ { "x" : 1278.1281077407016, "y" : -696.0529850240082 },
		/* 171 */ { "x" : 1281.8019663570055, "y" : -699.4445573536821 },
		/* 172 */ { "x" : 1250.8850967227265, "y" : -669.5422635952261 },
		/* 173 */ { "x" : 1289.432797254266, "y" : -695.6013269654001 },
		/* 174 */ { "x" : 1296.780514486874, "y" : -702.3844716247477 },
		/* 175 */ { "x" : 1279.9928519885052, "y" : -707.3012172802466 },
		/* 176 */ { "x" : 1287.2841119637872, "y" : -712.6712757503988 },
		/* 177 */ { "x" : 1280.6138818190914, "y" : -722.8451653613977 },
		/* 178 */ { "x" : 1292.1452277399826, "y" : -710.3540460659642 },
		/* 179 */ { "x" : 758.2125015258789, "y" : -838.1499938964844, "curve" : 130 },
		/* 180 */ { "x" : 1085.212501525879, "y" : 885.8500061035156, "curve" : 130 },
		/* 181 */ { "x" : 1381, "y" : -836 },
		/* 182 */ { "x" : -1329, "y" : -840 },
		/* 183 */ { "bCoef" : 0, "x" : -78.20001220703125, "y" : 899.800048828125 },
		/* 184 */ { "x" : 81.79998779296875, "y" : 898.800048828125 },
		/* 185 */ { "x" : -1.20001220703125, "y" : 748.800048828125 },
		/* 186 */ { "x" : -1.20001220703125, "y" : 792.800048828125 },
		/* 187 */ { "x" : 1229.5999755859375, "y" : 207.19999998807907, "color" : "ff0000" },
		/* 188 */ { "x" : 1229.5999755859375, "y" : 596.0000488162041, "color" : "ff0000" },
		/* 189 */ { "x" : 920.5999755859375, "y" : 672.1999999880791, "color" : "ff0000" },
		/* 190 */ { "x" : 613.2000732421875, "y" : 673.1999999880791, "color" : "ff0000" },
		/* 191 */ { "x" : -267, "y" : 675.1999999880791, "color" : "ff0000" },
		/* 192 */ { "x" : -615, "y" : 673.1999999880791, "color" : "ff0000" },
		/* 193 */ { "x" : -799, "y" : 673.1999999880791, "color" : "ff0000" },
		/* 194 */ { "x" : -932, "y" : 674.1999999880791, "color" : "ff0000" },
		/* 195 */ { "x" : -1013, "y" : 671.1999999880791, "color" : "ff0000" },
		/* 196 */ { "x" : -1144, "y" : 671.1999999880791, "color" : "ff0000" },
		/* 197 */ { "x" : -1230, "y" : -218.40000611543655, "color" : "ff0000" },
		/* 198 */ { "x" : -1230, "y" : -600.399998486042, "color" : "ff0000" },
		/* 199 */ { "x" : -1076, "y" : -674.6000030636787, "color" : "ff0000" },
		/* 200 */ { "x" : -734, "y" : -672.6000030636787, "color" : "ff0000" },
		/* 201 */ { "x" : -400, "y" : -672.6000030636787, "color" : "ff0000" },
		/* 202 */ { "x" : -10.20001220703125, "y" : -671.6000030636787, "color" : "ff0000" },
		/* 203 */ { "x" : 544.800048828125, "y" : -672.6000030636787, "color" : "ff0000" },
		/* 204 */ { "x" : 1156.5999755859375, "y" : -669.6000030636787, "color" : "ff0000" },
		/* 205 */ { "x" : 919.5999755859375, "y" : 672.4000732302666 },
		/* 206 */ { "x" : 1155.5999755859375, "y" : 671.4000732302666 },
		/* 207 */ { "x" : 268.4000244140625, "y" : 674.4000732302666 },
		/* 208 */ { "x" : 614.4000244140625, "y" : 672.4000732302666 },
		/* 209 */ { "x" : -797.6000003814697, "y" : 673.4000732302666 },
		/* 210 */ { "x" : -615.6000003814697, "y" : 672.4000732302666 },
		/* 211 */ { "x" : -1396.400001525879, "y" : 851.4000732302666 },
		/* 212 */ { "x" : -1231.400001525879, "y" : 600.6000244021416 },
		/* 213 */ { "x" : -1231.400001525879, "y" : 209.99998778104782 },
		/* 214 */ { "x" : -732.3999938964844, "y" : -672.0000007748604 },
		/* 215 */ { "x" : -405.79998779296875, "y" : -673.0000007748604 },
		/* 216 */ { "x" : 8.800048828125, "y" : -671.0000007748604 },
		/* 217 */ { "x" : 544.800048828125, "y" : -672.0000007748604 },
		/* 218 */ { "x" : 1229.5999755859375, "y" : -604.0000007748604 },
		/* 219 */ { "x" : 1228.5999755859375, "y" : -214.99998170137405 },
		/* 220 */ { "x" : 1382.599998474121, "y" : -887.4000015258789 },
		/* 221 */ { "x" : 1384.599998474121, "y" : 888.5999984741211 },
		/* 222 */ { "x" : 1449.599998474121, "y" : -889.4000015258789 },
		/* 223 */ { "x" : 1449.599998474121, "y" : 888.5999984741211 },
		/* 224 */ { "x" : -1397, "y" : 889 },
		/* 225 */ { "x" : -1396, "y" : -883 },
		/* 226 */ { "x" : 1450, "y" : -787 },
		/* 227 */ { "x" : -1396, "y" : -790 },
		/* 228 */ { "x" : 1158, "y" : -671 },
		/* 229 */ { "x" : 1449, "y" : 883 },
		/* 230 */ { "x" : -1402, "y" : 887 },
		/* 231 */ { "x" : 1381, "y" : 818 },
		/* 232 */ { "x" : 80, "y" : 823 },
		/* 233 */ { "x" : -80, "y" : 825, "curve" : 0 },
		/* 234 */ { "x" : -1361, "y" : 823, "curve" : 0 },
		
		/* 235 */ { "bCoef" : 0.5, "cGroup" : ["ball" ], "trait" : "goalPost", "x" : -1396, "y" : -701.9999969601631 },
		
		/* 236 */ { "x" : -1232, "y" : 602.1999999880791 },
		/* 237 */ { "x" : -1271, "y" : 607.1999999880791 },
		/* 238 */ { "x" : -1396, "y" : 850.1999999880791 },
		/* 239 */ { "x" : 1449.5999755859375, "y" : 823.1999999880791 },
		/* 240 */ { "x" : 1225.5999755859375, "y" : 739.1999999880791 },
		/* 241 */ { "x" : -1200, "y" : 734.1999999880791 },
		/* 242 */ { "x" : 1297.5999755859375, "y" : -606.9999969601631 },
		/* 243 */ { "x" : -1299, "y" : -600.0000007748604 },
		/* 244 */ { "x" : -1396, "y" : -215.80000001192093 },
		/* 245 */ { "x" : -1399, "y" : 212.19999998807907 },
		/* 246 */ { "x" : 1449.5999755859375, "y" : -220.80000001192093 },
		/* 247 */ { "x" : 1449.5999755859375, "y" : 209.19999998807907 },
		/* 248 */ { "x" : 1161.5999755859375, "y" : 888.1999999880791 },
		/* 249 */ { "x" : 1449.5999755859375, "y" : 592.1999999880791 },
		/* 250 */ { "x" : -1144, "y" : 887.1999999880791 },
		/* 251 */ { "x" : -1398, "y" : 602.1999999880791 },
		
		/* 252 */ { "x" : -0.5999755859375, "y" : -180, "trait" : "kickOffBarrier" },
		/* 253 */ { "x" : -0.5999755859375, "y" : -879, "trait" : "kickOffBarrier" }

	],

	"segments" : [
		{ "v0" : 0, "v1" : 1, "trait" : "kickOffBarrier" },
		
		{ "v0" : 3, "v1" : 4, "trait" : "line", "y" : 320 },
		{ "v0" : 4, "v1" : 6, "trait" : "line", "x" : 840 },
		{ "v0" : 5, "v1" : 6, "trait" : "line", "y" : -320 },
		{ "v0" : 7, "v1" : 8, "trait" : "line", "y" : 180 },
		{ "v0" : 8, "v1" : 10, "trait" : "line", "x" : 1030 },
		{ "v0" : 9, "v1" : 10, "trait" : "line", "y" : -180 },
		{ "v0" : 11, "v1" : 12, "curve" : -115.03004932348748, "trait" : "line", "x" : 840 },
		{ "v0" : 13, "v1" : 14, "trait" : "line", "y" : -320 },
		{ "v0" : 14, "v1" : 16, "trait" : "line", "x" : -840 },
		{ "v0" : 15, "v1" : 16, "trait" : "line", "y" : 320 },
		{ "v0" : 17, "v1" : 18, "trait" : "line", "y" : -175 },
		{ "v0" : 18, "v1" : 20, "trait" : "line", "x" : -1030 },
		{ "v0" : 19, "v1" : 20, "trait" : "line", "y" : 175 },
		{ "v0" : 21, "v1" : 22, "curve" : -128.78262365321427, "trait" : "line", "x" : -840 },
		{ "v0" : 23, "v1" : 24, "curve" : -72.48856522569984, "trait" : "line", "x" : -935 },
		{ "v0" : 23, "v1" : 24, "curve" : 105.30664991118994, "trait" : "line", "x" : -935 },
		{ "v0" : 23, "v1" : 24, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 23, "v1" : 24, "curve" : 190.15921587093973, "trait" : "line", "x" : -935 },
		{ "v0" : 23, "v1" : 24, "trait" : "line", "x" : -935, "curve" : -170.58730644106595 },
		{ "v0" : 25, "v1" : 26, "curve" : 90, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 27, "v1" : 28, "curve" : 90, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 29, "v1" : 30, "curve" : 90, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		{ "v0" : 31, "v1" : 32, "curve" : 90, "bCoef" : -2.9, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line" },
		
		{ "v0" : 34, "v1" : 33, "curve" : -180, "vis" : false, "bCoef" : 0.1, "cGroup" : ["blueKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 36, "v1" : 37, "curve" : 70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : -1030 },
		{ "v0" : 38, "v1" : 39, "curve" : -70, "vis" : false, "color" : "576C46", "bCoef" : -5.7, "cMask" : ["ball" ], "cGroup" : ["c0" ], "trait" : "line", "x" : 1030 },
		
		{ "v0" : 34, "v1" : 35, "curve" : 180, "vis" : false, "bCoef" : 0.1, "cMask" : ["red","blue" ], "cGroup" : ["redKO" ], "trait" : "kickOffBarrier" },
		
		{ "v0" : 40, "v1" : 41, "vis" : true, "color" : "576C46", "trait" : "line", "x" : 1030 },
		{ "v0" : 42, "v1" : 43, "vis" : true, "color" : "576C46", "trait" : "line", "x" : -1030 },
		{ "v0" : 44, "v1" : 45, "curve" : -180, "trait" : "line", "x" : -935 },
		{ "v0" : 44, "v1" : 45, "curve" : 180, "trait" : "line", "x" : -935 },
		{ "v0" : 44, "v1" : 45, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 44, "v1" : 45, "curve" : -90, "trait" : "line", "x" : -935 },
		{ "v0" : 44, "v1" : 45, "trait" : "line", "x" : -935 },
		
		{ "v0" : 46, "v1" : 47, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : -460 },
		{ "v0" : 48, "v1" : 49, "vis" : false, "color" : "ec644b", "bCoef" : 0, "cMask" : ["c1" ], "cGroup" : ["red","blue" ], "y" : 460 },
		{ "v0" : 50, "v1" : 51, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 51, "v1" : 52, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 52, "v1" : 53, "vis" : false, "color" : "ec644b", "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 54, "v1" : 55, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 55, "v1" : 56, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 56, "v1" : 57, "vis" : false, "cMask" : ["c0" ], "cGroup" : ["red","blue" ] },
		{ "v0" : 58, "v1" : 59, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "y" : -124 },
		{ "v0" : 60, "v1" : 61, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "y" : 124 },
		{ "v0" : 61, "v1" : 59, "curve" : 5, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "bias" : 0 },
		{ "v0" : 59, "v1" : 62, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ] },
		{ "v0" : 61, "v1" : 63, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ] },
		{ "v0" : 64, "v1" : 65, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "y" : 124 },
		{ "v0" : 66, "v1" : 67, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "y" : -124 },
		{ "v0" : 65, "v1" : 67, "curve" : -5, "color" : "FFFFFF", "bCoef" : 0.1, "cMask" : ["ball","red","blue" ] },
		{ "v0" : 67, "v1" : 68, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ] },
		{ "v0" : 65, "v1" : 69, "color" : "FFFFFF", "bCoef" : 0, "cMask" : ["ball" ] },
		
		{ "v0" : 70, "v1" : 71, "curve" : -72.48856522569984, "trait" : "line", "x" : -935 },
		{ "v0" : 70, "v1" : 71, "curve" : 105.30664991118994, "trait" : "line", "x" : -935 },
		{ "v0" : 70, "v1" : 71, "curve" : 90, "trait" : "line", "x" : -935 },
		{ "v0" : 70, "v1" : 71, "curve" : 190.15921587093973, "trait" : "line", "x" : -935 },
		{ "v0" : 70, "v1" : 71, "trait" : "line", "x" : -935, "curve" : -170.58730644106595 },
		
		{ "color" : "FFFFFF", "v0" : 72, "v1" : 73 },
		{ "color" : "FFFFFF", "v0" : 73, "v1" : 74 },
		{ "color" : "FFFFFF", "v0" : 74, "v1" : 75 },
		{ "color" : "FFFFFF", "v0" : 75, "v1" : 72 },
		{ "color" : "FFFFFF", "v0" : 76, "v1" : 77 },
		{ "color" : "FFFFFF", "v0" : 78, "v1" : 79 },
		{ "color" : "FFFFFF", "v0" : 79, "v1" : 80 },
		{ "color" : "FFFFFF", "v0" : 80, "v1" : 81 },
		{ "color" : "FFFFFF", "v0" : 81, "v1" : 78 },
		{ "color" : "FFFFFF", "v0" : 82, "v1" : 83 },
		{ "color" : "ff0000", "v0" : 84, "v1" : 85 },
		{ "color" : "fff000", "v0" : 86, "v1" : 87 },
		{ "color" : "66ffff", "v0" : 89, "v1" : 90 },
		{ "color" : "000000", "v0" : 91, "v1" : 92 },
		{ "color" : "000000", "v0" : 93, "v1" : 94 },
		{ "color" : "000000", "v0" : 95, "v1" : 96 },
		{ "color" : "000000", "v0" : 97, "v1" : 98 },
		{ "color" : "ff9933", "v0" : 85, "v1" : 90 },
		{ "color" : "00ff00", "v0" : 87, "v1" : 99, "curve" : 0.7786339803211149 },
		{ "color" : "000000", "v0" : 104, "v1" : 105 },
		{ "color" : "000000", "v0" : 105, "v1" : 106 },
		{ "color" : "000000", "v0" : 106, "v1" : 107 },
		{ "color" : "000000", "v0" : 104, "v1" : 107 },
		{ "color" : "000000", "v0" : 108, "v1" : 109 },
		{ "color" : "000000", "v0" : 110, "v1" : 111 },
		{ "color" : "000000", "v0" : 112, "v1" : 110 },
		{ "color" : "000000", "v0" : 113, "v1" : 114 },
		{ "color" : "000000", "v0" : 115, "v1" : 116 },
		{ "color" : "000000", "v0" : 114, "v1" : 116 },
		{ "color" : "000000", "v0" : 109, "v1" : 117 },
		{ "color" : "000000", "v0" : 112, "v1" : 106 },
		{ "color" : "000000", "v0" : 112, "v1" : 105 },
		{ "color" : "000000", "v0" : 111, "v1" : 118 },
		{ "color" : "000000", "v0" : 111, "v1" : 118 },
		{ "color" : "000000", "v0" : 111, "v1" : 118 },
		{ "color" : "ffffff", "v0" : 114, "v1" : 116 },
		{ "color" : "000000", "v0" : 119, "v1" : 120 },
		{ "color" : "000000", "v0" : 120, "v1" : 121 },
		{ "color" : "000000", "v0" : 121, "v1" : 122 },
		{ "color" : "000000", "v0" : 119, "v1" : 122 },
		{ "color" : "000000", "v0" : 123, "v1" : 124 },
		{ "color" : "000000", "v0" : 125, "v1" : 126 },
		{ "color" : "000000", "v0" : 127, "v1" : 125 },
		{ "color" : "000000", "v0" : 128, "v1" : 129 },
		{ "color" : "000000", "v0" : 130, "v1" : 131 },
		{ "color" : "000000", "v0" : 129, "v1" : 131 },
		{ "color" : "000000", "v0" : 124, "v1" : 132 },
		{ "color" : "000000", "v0" : 127, "v1" : 121 },
		{ "color" : "000000", "v0" : 127, "v1" : 120 },
		{ "color" : "000000", "v0" : 126, "v1" : 133 },
		{ "color" : "000000", "v0" : 126, "v1" : 133 },
		{ "color" : "000000", "v0" : 126, "v1" : 133 },
		{ "color" : "ffffff", "v0" : 129, "v1" : 131 },
		{ "color" : "000000", "v0" : 134, "v1" : 135 },
		{ "color" : "000000", "v0" : 135, "v1" : 136 },
		{ "color" : "000000", "v0" : 136, "v1" : 137 },
		{ "color" : "000000", "v0" : 134, "v1" : 137 },
		{ "color" : "000000", "v0" : 138, "v1" : 139 },
		{ "color" : "000000", "v0" : 140, "v1" : 141 },
		{ "color" : "000000", "v0" : 142, "v1" : 140 },
		{ "color" : "000000", "v0" : 143, "v1" : 144 },
		{ "color" : "000000", "v0" : 145, "v1" : 146 },
		{ "color" : "000000", "v0" : 144, "v1" : 146 },
		{ "color" : "000000", "v0" : 139, "v1" : 147 },
		{ "color" : "000000", "v0" : 142, "v1" : 136 },
		{ "color" : "000000", "v0" : 142, "v1" : 135 },
		{ "color" : "000000", "v0" : 141, "v1" : 148 },
		{ "color" : "000000", "v0" : 141, "v1" : 148 },
		{ "color" : "000000", "v0" : 141, "v1" : 148 },
		{ "color" : "ffffff", "v0" : 144, "v1" : 146 },
		{ "color" : "000000", "v0" : 149, "v1" : 150 },
		{ "color" : "000000", "v0" : 150, "v1" : 151 },
		{ "color" : "000000", "v0" : 151, "v1" : 152 },
		{ "color" : "000000", "v0" : 149, "v1" : 152 },
		{ "color" : "000000", "v0" : 153, "v1" : 154 },
		{ "color" : "000000", "v0" : 155, "v1" : 156 },
		{ "color" : "000000", "v0" : 157, "v1" : 155 },
		{ "color" : "000000", "v0" : 158, "v1" : 159 },
		{ "color" : "000000", "v0" : 160, "v1" : 161 },
		{ "color" : "000000", "v0" : 159, "v1" : 161 },
		{ "color" : "000000", "v0" : 154, "v1" : 162 },
		{ "color" : "000000", "v0" : 157, "v1" : 151 },
		{ "color" : "000000", "v0" : 157, "v1" : 150 },
		{ "color" : "000000", "v0" : 156, "v1" : 163 },
		{ "color" : "000000", "v0" : 156, "v1" : 163 },
		{ "color" : "000000", "v0" : 156, "v1" : 163 },
		{ "color" : "ffffff", "v0" : 159, "v1" : 161 },
		{ "color" : "000000", "v0" : 164, "v1" : 165 },
		{ "color" : "000000", "v0" : 165, "v1" : 166 },
		{ "color" : "000000", "v0" : 166, "v1" : 167 },
		{ "color" : "000000", "v0" : 164, "v1" : 167 },
		{ "color" : "000000", "v0" : 168, "v1" : 169 },
		{ "color" : "000000", "v0" : 170, "v1" : 171 },
		{ "color" : "000000", "v0" : 172, "v1" : 170 },
		{ "color" : "000000", "v0" : 173, "v1" : 174 },
		{ "color" : "000000", "v0" : 175, "v1" : 176 },
		{ "color" : "000000", "v0" : 174, "v1" : 176 },
		{ "color" : "000000", "v0" : 169, "v1" : 177 },
		{ "color" : "000000", "v0" : 172, "v1" : 166 },
		{ "color" : "000000", "v0" : 172, "v1" : 165 },
		{ "color" : "000000", "v0" : 171, "v1" : 178 },
		{ "color" : "000000", "v0" : 171, "v1" : 178 },
		{ "color" : "000000", "v0" : 171, "v1" : 178 },
		{ "color" : "ffffff", "v0" : 174, "v1" : 176 },
		{ "curve" : 0, "color" : "111111", "v0" : 181, "v1" : 182 },
		{ "color" : "ffffff", "bCoef" : 0, "v0" : 73, "v1" : 183, "curve" : 1.8211163331765419 },
		{ "color" : "ffffff", "v0" : 80, "v1" : 184 },
		{ "color" : "ffffff", "v0" : 185, "v1" : 186 },
		{ "color" : "ff0000", "v0" : 187, "v1" : 188 },
		{ "color" : "ff0000", "v0" : 189, "v1" : 190 },
		{ "color" : "ff0000", "v0" : 191, "v1" : 192 },
		{ "color" : "ff0000", "v0" : 193, "v1" : 194 },
		{ "color" : "ff0000", "v0" : 195, "v1" : 196 },
		{ "color" : "ff0000", "v0" : 197, "v1" : 198 },
		{ "color" : "ff0000", "v0" : 199, "v1" : 200 },
		{ "color" : "ff0000", "v0" : 201, "v1" : 202 },
		{ "color" : "ff0000", "v0" : 203, "v1" : 204 },
		{ "color" : "3333ff", "v0" : 205, "v1" : 206 },
		{ "color" : "3333ff", "v0" : 207, "v1" : 208 },
		{ "color" : "3333ff", "v0" : 209, "v1" : 210 },
		{ "color" : "3333ff", "v0" : 212, "v1" : 213 },
		{ "color" : "3333ff", "v0" : 214, "v1" : 215 },
		{ "color" : "3333ff", "v0" : 216, "v1" : 217 },
		{ "color" : "3333ff", "v0" : 218, "v1" : 219 },
		{ "color" : "3333ff", "v0" : 220, "v1" : 221 },
		{ "color" : "3333ff", "v0" : 222, "v1" : 223, "curve" : 0.19488341589816824 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 224, "v1" : 225 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 225, "v1" : 222 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 226, "v1" : 227 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 199, "v1" : 225 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 228, "v1" : 222 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 224, "v1" : 223 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 229, "v1" : 85 },
		{ "curve" : 0.19488341589816824, "color" : "ff0000", "v0" : 230, "v1" : 87 },
		{ "color" : "ff0000", "v0" : 231, "v1" : 232 },
		{ "curve" : 0, "color" : "fff000", "v0" : 233, "v1" : 234 },
		{ "v0" : 218, "v1" : 242 },
		{ "v0" : 198, "v1" : 243 },
		{ "v0" : 197, "v1" : 244 },
		{ "v0" : 213, "v1" : 245 },
		{ "v0" : 219, "v1" : 246 },
		{ "v0" : 187, "v1" : 247 },
		{ "v0" : 206, "v1" : 248 },
		{ "v0" : 188, "v1" : 249 },
		{ "v0" : 196, "v1" : 250 },
		{ "v0" : 236, "v1" : 251 },
		
		{ "v0" : 252, "v1" : 253, "trait" : "kickOffBarrier", "curve" : -0.1319742020162972 }

	],

	"goals" : [
		{ "team" : "red", "p0" : [-1164,-101.79998779296875 ], "p1" : [-1164,108.20001220703125 ] },
		{ "team" : "blue", "p0" : [1162.800048828125,-103.79998779296875 ], "p1" : [1164.800048828125,102.20001220703125 ] }

	],

	"discs" : [
		{ "radius" : 0, "invMass" : 0, "pos" : [-1311,-19 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1310,29 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["blue" ], "cGroup" : ["ball" ] },
		{ "radius" : 0, "invMass" : 0, "pos" : [-1308,62 ], "color" : "ffffffff", "bCoef" : 0, "cMask" : ["red","blue" ], "cGroup" : ["ball" ] },
		
		{ "radius" : 2.7, "pos" : [-1150,600 ], "cGroup" : ["ball" ], "trait" : "cornerflag" },
		{ "radius" : 2.7, "pos" : [1150,-600 ], "cGroup" : ["ball" ], "trait" : "cornerflag" },
		{ "radius" : 2.7, "pos" : [1150,600 ], "cGroup" : ["ball" ], "trait" : "cornerflag" },
		
		{ "radius" : 5, "invMass" : 0, "pos" : [-1149,-101 ], "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [-1150,105 ], "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 2, "invMass" : 0, "pos" : [-1250,-158 ], "color" : "000000", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 2, "invMass" : 0, "pos" : [-1250,158 ], "color" : "000000", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1151,-102 ], "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 5, "invMass" : 0, "pos" : [1151,101 ], "bCoef" : 0.5, "trait" : "goalPost" },
		{ "radius" : 2, "invMass" : 0, "pos" : [1250,-158 ], "color" : "000000", "bCoef" : 1, "trait" : "goalPost" },
		{ "radius" : 2, "invMass" : 0, "pos" : [1250,158 ], "color" : "000000", "bCoef" : 1, "trait" : "goalPost" },
		
		{ "radius" : 2.7, "pos" : [-1150,-600 ], "cGroup" : ["ball" ], "trait" : "cornerflag" },
		
		{ "radius" : 0, "pos" : [-1149,-460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,-460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,-460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [-1149,460 ], "cMask" : ["none" ] },
		{ "radius" : 0, "pos" : [1149,460 ], "cMask" : ["none" ] },
		
		{ "radius" : 6.324555320336759, "invMass" : 0, "pos" : [1200.800048828125,84.79998779296875 ], "color" : "000000", "bCoef" : 0.5, "cGroup" : ["ball" ], "trait" : "goalPost" },
		{ "radius" : 6.324555320336759, "invMass" : 0, "pos" : [-1204.199951171875,-89.20001220703125 ], "color" : "000000", "bCoef" : 0.5, "cGroup" : ["ball" ], "trait" : "goalPost" },
		{ "radius" : 6.324555320336759, "invMass" : 0, "pos" : [-1200.199951171875,90.79998779296875 ], "color" : "000000", "bCoef" : 0.5, "cGroup" : ["ball" ], "trait" : "goalPost" },
		{ "radius" : 6.324555320336759, "invMass" : 0, "pos" : [1203.800048828125,-88.20001220703125 ], "color" : "000000", "bCoef" : 0.5, "cGroup" : ["ball" ], "trait" : "goalPost" },
		{ "radius" : 7, "invMass" : 0, "pos" : [-0.5999755859375,684.800048828125 ], "color" : "fff000", "bCoef" : 0, "trait" : "goalPost" }

	],

	"planes" : [
		{ "normal" : [0,1 ], "dist" : -627, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		{ "normal" : [0,-1 ], "dist" : -628, "bCoef" : 0, "cGroup" : ["ball" ], "trait" : "ballArea" },
		
		{ "normal" : [0,1 ], "dist" : -670, "bCoef" : 0 },
		{ "normal" : [0,-1 ], "dist" : -878, "bCoef" : 0 },
		{ "normal" : [1,0 ], "dist" : -1301, "bCoef" : 0 },
		{ "normal" : [-1,0 ], "dist" : -1300, "bCoef" : 0.1 },
		{ "normal" : [1,0 ], "dist" : -1230, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		{ "normal" : [-1,0 ], "dist" : -1230, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] }

	],

	"traits" : {
		"ballArea" : { "vis" : false, "bCoef" : 0, "cMask" : ["ball" ], "cGroup" : ["ball" ] },
		"goalPost" : { "radius" : 5, "invMass" : 0, "bCoef" : 1, "cGroup" : ["ball" ] },
		"rightNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c3" ] },
		"leftNet" : { "radius" : 0, "invMass" : 1, "bCoef" : 0, "cGroup" : ["ball","c2" ] },
		"stanchion" : { "radius" : 3, "invMass" : 0, "bCoef" : 3, "cMask" : ["none" ] },
		"cornerflag" : { "radius" : 3, "invMass" : 0, "bCoef" : 0.2, "color" : "FFFF00", "cMask" : ["ball" ] },
		"reargoalNetleft" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : 10, "color" : "C7E6BD" },
		"reargoalNetright" : { "vis" : true, "bCoef" : 0.1, "cMask" : ["ball","red","blue" ], "curve" : -10, "color" : "C7E6BD" },
		"sidegoalNet" : { "vis" : true, "bCoef" : 1, "cMask" : ["ball","red","blue" ], "color" : "C7E6BD" },
		"kickOffBarrier" : { "vis" : false, "bCoef" : 0.1, "cGroup" : ["redKO","blueKO" ], "cMask" : ["red","blue" ] },
		"line" : { "vis" : true, "cMask" : [ ], "color" : "C7E6BD" }},"joints":[{"d0":16,"d1":17,"strength":"rigid","color":"ec7458","length":null},{"d0":18,"d1":19,"strength":"rigid","color":"48bef9","length":null},{"d0":20,"d1":21,"strength":"rigid","color":"ec7458","length":null},{"d0":22,"d1":23,"strength":"rigid","color":"48bef9","length":null}],"redSpawnPoints":[[ -214, 0],[ -315, -177],[ -315, 177],[ -490, -370],[ -490, 370],[ -619, 0],[ -810, -200],[ -810, 200],[ -1060, 0],[ -42, 843]],"blueSpawnPoints":[[ 214, 0],[ 315, -177],[ 315, 177],[ 490, -370],[ 490, 370],[ 619, 0],[ 810, -200],[ 810, 200],[ 1060, 0],[ 40, 843]],"canBeStored":false}`;
			
			return realSoccerMap;
		}

		/*------------------------------ END OF STADIUMS ----------------------------*/

		// ------------------------------------------------
		// Global Variables
		// ------------------------------------------------
		var roomName = "️🏆9vs9 REALSOCCER~~ MAP NCN🏆";
		var roomPassword = null;
		var maxPlayers = 40;
		var roomPublic = true;
		var token = "";
		var roomLink = "";
		var gameTime = 12; //default game time if 0 is selected
		var map = "RSR";
		var superAdmins = [];

		var room = HBInit({
			roomName: roomName,
			password: roomPassword,
			maxPlayers: maxPlayers,
			public: roomPublic,
			geo: {code: "VN", lat: 16.46, lon: 107.59},
			noPlayer: true,
			token: token
		});


		// -------------------------------------------------
		// Classes
		// -------------------------------------------------
		class Game {
			constructor() {
				this.time = 0;
				this.paused = false;
				this.ballRadius;
				this.rsTouchTeam = 0;
				this.rsActive = true;
				this.rsReady = false;
				this.rsCorner = false;
				this.rsGoalKick = false;
				this.rsSwingTimer = 1000;
				this.rsTimer;
				this.ballOutPositionX;
				this.ballOutPositionY;
				this.throwInPosY;
				this.outStatus = "";
				this.warningCount = 0;
				this.bringThrowBack = false;
				this.extraTime = false;
				this.extraTimeCount = 0;
				this.extraTimeEnd;
				this.extraTimeAnnounced = false;
				this.lastPlayAnnounced = false;
				this.boosterState;
				this.throwinKicked = false;
				this.pushedOut;
				this.lastKickerId;
				this.lastKickerName;
				this.lastKickerTeam;
				this.secondLastKickerId;
				this.secondLastKickerName;
				this.secondLastKickerTeam;
				this.redScore = 0;
				this.blueScore = 0;
				this.powershotCounter = 0;
				this.powershotID = 0;
				this.powershotTrigger = false;
			}
			
			updateLastKicker(id, name, team) {
				this.secondLastKickerId = this.lastKickerId;
				this.secondLastKickerName = this.lastKickerName;
				this.secondLastKickerTeam = this.lastKickerTeam;
				
				this.lastKickerId = id;
				this.lastKickerName = name;
				this.lastKickerTeam = team;
			}
		}

		room.setCustomStadium(getRealSoccerMap());
		room.setScoreLimit(0);
		room.setTimeLimit(10);

		room.setTeamsLock(true);
		room.onRoomLink = function(url) {
			roomLink = url;
			console.log(roomLink);
			playtaixiu(3);
		}

		room.onStadiumChange = function(newStadiumName, byPlayer) {
			if (byPlayer != null) {
				map = "custom";
			}
			else {
				map = "RSR";
			}
		}

		room.onPlayerJoin = function(player) {	
			console.log(player.name + " joined the room");
			whisper("🎖    🏆 Chào Mừng Đến Với Worldcup,Champions Leagua  🏆", player.id, 0x61ddff, "bold", 0);     
               		whisper(" 🎖    ⚽W                MAP REAL SOCCER 9Vs9              W⚽", player.id, 0x61e7ff, "bold", 0);  
			whisper("🎖    ️🥇 Nhập !help để biết thêm về các lệnh của Player hoặc !adminhelp để biết thêm về các lệnh của Admin ⚽", player.id, 0x61ddff, "bold", 0);
			whisper(" ⚽    Nhập !teamred hoặc !teamblue để chọn team ️🏅", player.pm, 0xfff70f, "bold", 0);
    			whisper(" ️🥅T                     Lưu ý : !spec để vào dự bị                         T🥅", player.id, 0xffc400, "bold", 0); 
			whisper(" Nhập !shop để dùng mở cửa hàng của Room!",player.id,0x61ddff,'bold',0);
			if (ids[player.id] == undefined) {ids[player.id] = player.name; } 	
			addValue(player.name);
			var playerData = localStorage.getItem(player.name);
			if (playerData) {
				whisper("⚠️: Tài khoản ĐÃ tồn tại. !dangnhap matkhau để đăng nhập",player.id, 0xFF4C4C, 'bold',1);
			}
			else {
				whisper("⚠️: Tài khoản KHÔNG tồn tại. !dangky matkhau để đăng ký",player.id, 0xFF4C4C, 'bold',1);
			}	
			displayAdminMessage();
		}

		room.onPlayerLeave = function(player) {
			displayAdminMessage();
			console.log(player.name + " left the room");
			ids[player.id] = undefined;
			if (logged.includes(player.name)) {
				let vitri = logged.indexOf(player.name);
				logged.splice(vitri,1);
				console.log(logged);
			}
			let index = superAdmins.indexOf(player.id);
			if (index > -1) {
				sleep(100).then(() => {
					superAdmins.splice(index, 1);
				});
			}
		}

		room.onPlayerAdminChange = function(changedPlayer, byPlayer) {
			if (byPlayer != null) {
				if (changedPlayer.id != byPlayer.id) {
					if (superAdmins.indexOf(changedPlayer.id) > -1) {
						room.kickPlayer(byPlayer.id, "You cannot remove a Super Admin", false);
						room.setPlayerAdmin(changedPlayer.id, true);
					}
				}
				else {
					if (changedPlayer.admin == false) {
						let index = superAdmins.indexOf(changedPlayer.id);
						if (index > -1) {
						  superAdmins.splice(index, 1);
						}
					}
				}
			}
		}

		room.onGameStart = function(byPlayer) {
		if (map == "RSR") {
		room.setDiscProperties(0, {invMass: 1.05});
		game = new Game();	
		announce( "📢:"+"Trận đấu sẽ kết thúc sau " + gameTime + " phút");
		}
		let rand = getRandomInt(15)
				switch(rand) {
				case 0:
					room.setTeamColors(1,5,0xFFFFFF,[0x6BBABF,0x2F4E7D,0x6BBABF])
					break;
				case 1:
					room.setTeamColors(1,40,0x000000,[0xFF9F40,0xFFD154,0xFF9F40])
					break;
				case 2:
					room.setTeamColors(1,60,0x000000,[0x9BFF7D,0x60CC50,0x9BFF7D])
					break;
				case 3:
					room.setTeamColors(1,0 ,0xFFFFFF ,[0xFF0000 ,0x000000  ,0xFF0000 ])
					break;
				case 4:
					room.setTeamColors(1,0,0xFFFFFF ,[0xFF0000 ,0xC40000,0x8F0000])
					break;
				case 5:
					room.setTeamColors(1,180 ,0xFFFFFF ,[0x003F70  ,0xFF010C  ,0x003F70  ])
					break;
				case 6:
					room.setTeamColors(1,180,0x000000  ,[0xFFFFFF  ,0xF7B3FF ,0xFFFFFF ])
					break;
				case 7:
					room.setTeamColors(1,0 ,0xFFEA29  ,[0x1100FF   ,0x1100FF   ,0xFF0000  ])
					break;
				case 8:
					room.setTeamColors(1,0 , 0xFFFFFF ,[0x455E5D,0xC6D881   ,0xA3C2C1  ])
					break;
				case 9:
					room.setTeamColors(1,0 , 0x000000 ,[0xFDFF29  ])
					break;
				case 10:
					room.setTeamColors(1,0 , 0xFFFFFF ,[0x333333  ])
					break;
				case 11:
					room.setTeamColors(1,0 , 0x000000 ,[0x455E5D,0x000000,0x455E5D  ])
					break;
				case 12:
					room.setTeamColors(1,0 , 0xFFFFFF ,[0xE7A3FF,0x8C05FF,0xE7A3FF  ])
					break;
				case 13:
					room.setTeamColors(1,0 , 0xFFFFFF ,[0x8C05FF,0xE7A3FF,0x8C05FF  ])
					break;
				case 14:
					room.setTeamColors(1,0 , 0x000000 ,[0x089AFF,0x05FF84,0x1BC2AD  ])
					break;
				case 15:
					room.setTeamColors(1,0 , 0x000000 ,[0xD3ABFF,0xE7FFB0,0x7CC27F  ])
					break;
				case 16:
					room.setTeamColors(1, 90, 0xFFFFFF, [0xFF0000, 0x7A0000, 0x470000])
					break;
				case 17:
					room.setTeamColors(1, 138, 0xFFFFFF, [0xFF0000])
					break;
				case 18:
					room.setTeamColors(1, 138, 0xFFFFFF, [0xFF0000, 0x1D09B2])
					break;
				case 19:
					room.setTeamColors(1, 244, 0xFFFFFF, [0xF5FF3E, 0xB2B2B2])
					break;
				case 20:
					room.setTeamColors(1, 244, 0x000000, [0xFFFFFF])
					break;
			}
				rand = getRandomInt(20)
				switch(rand) {
				case 0:
					room.setTeamColors(2,-25,0xFFFFFF,[0xE8598D,0x9C2862,0xE8598D])
					break;
				case 1:
					room.setTeamColors(2,-40,0x000000,[0xF0EB54,0x9C955A,0xF0EB54])
					break;
				case 2:
					room.setTeamColors(2,60,0xFFFFFF,[0x18EDD0,0x109C89,0x18EDD0])
					break;
				case 3:
					room.setTeamColors(2,0,0xFFFFFF ,[0x002AFF ,0x000000 ,0x001AFF ])
					break;
				case 4:
					room.setTeamColors(2,0,0xFFFFFF,[0x004D99 ,0x004077 ,0x004785 ])
					break;
				case 5:
					room.setTeamColors(2,0,0xFF0000 ,[0x0569FF ,0xFFFFFF ,0x004DFF])
					break;
				case 6:
					room.setTeamColors(2,0,0x858585   ,[0xFFFFFF     ,0x000000  ,0xFFFFFF  ])
					break;
				case 7:
					room.setTeamColors(2,45  ,0xA3932E   ,[0xFFFFFF ])
					break;
				case 8:
					room.setTeamColors(2,0 , 0xFFFFFF ,[0xC2C983,0x66D8A4   ,0x9DC255  ])
					break;
				case 9:
					room.setTeamColors(2,0 , 0x000000 ,[0xC9758E,0xFFFFFF   ,0xC26F87  ])
					break;
				case 10:
					room.setTeamColors(2,0 , 0x000000 ,[0x44E390  ])
					break;
				case 11:
					room.setTeamColors(2,0 , 0x000000 ,[0xA57BE3,0xDCDE2A  ])
					break;
				case 12:
					room.setTeamColors(2,0 , 0x000000 ,[0xE3743B,0xE7FFB0,0xE3743B	  ])
					break;
				case 13:
					room.setTeamColors(2,0 , 0x000000 ,[0xE356B3,0xB500FF  ])
					break;
				case 14:
					room.setTeamColors(2,0 , 0xFFFFFF ,[0xE3743B,0xE3070C,0xE3743B  ])
					break;
				case 15:
					room.setTeamColors(2,0 , 0xFF007D ,[0xFFFFFF,0x000000  ])
					break;
				case 16:
					room.setTeamColors(2, 90, 0xFFFFFF, [0x320EFF, 0x170FB2, 0x000847])
					break;
				case 17:
					room.setTeamColors(2, 53, 0xFFFFFF, [0x10FFFB, 0x1139B2, 0x25027F])
					break;
				case 18:
					room.setTeamColors(2, 146, 0xFFFFFF, [0xE6FF2A, 0xFF0101, 0x16117F])
					break;
				case 19:
					room.setTeamColors(2, 138, 0xFFFFFF, [0xCBCBCB, 0x37373C, 0x000000])
					break;
				case 20:
					room.setTeamColors(2, 138, 0xFFFFFF, [0x7E8412, 0xACB248, 0xFFFB1A])
					break;
			}	
		}
		room.onTeamVictory = function () {
			endGame();
		}
		room.onGameStop = function(byPlayer) {
			if (map == "RSR") {
				if (byPlayer == null) {
					announce("📢:Trận đấu sẽ bắt đầu sau 10 giây!");
					sleep(10000).then(() => {
						room.startGame();
					});
				}
			}
		}
			

		room.onPlayerBallKick = function(player) {	
			if (map == "RSR") {
				game.rsTouchTeam = player.team;
				game.updateLastKicker(player.id, player.name, player.team);
				
				//=========== POWERSHOT CODE ===========
		if (powerShotMode == true) {
			if (game.powershotCounter > 0 && game.powershotCounter < 60) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.0001});

			}
			else if (game.powershotCounter > 85 && game.powershotCounter < 150) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.007,ygravity: room.getPlayerDiscProperties(player.id).yspeed * 0.03});
			
				room.sendAnnouncement(player.name +" đã thực hiện 1 cú sút bình thường !", player.pm, 0x33dddd, "bold", 0);
			}
			else if (game.powershotCounter >150 && game.powershotCounter < 250) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.01,ygravity: room.getPlayerDiscProperties(player.id).yspeed * 0.03});
					
				room.sendAnnouncement(player.name +" đã thực hiện 1 cú sút mạnh  !", player.pm, 0x33dddd, "bold", 0);

			}
			else if (game.powershotCounter > 250&& game.powershotCounter < 350) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.05,ygravity: room.getPlayerDiscProperties(player.id).yspeed * 0.03});
					
				room.sendAnnouncement(player.name +" đã thực hiện 1 cú sút cực mạnh  !", player.pm, 0x33dddd, "bold", 0);
			}
			else if (game.powershotCounter > 350) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.1,ygravity: room.getPlayerDiscProperties(player.id).yspeed * 0.03});
					
				room.sendAnnouncement(player.name +" đã thực hiện 1 cú sút siêu mạnh   !", player.pm, 0x33dddd, "bold", 0);
			}
			
			game.powershotCounter = 0;
			game.powershotID = 0;
			game.powershotTrigger = false;
			
			if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) != 1.05) {
				room.setDiscProperties(0, {invMass: 1.05});
	
			}
			sleep(600).then(() => {
				room.setDiscProperties(0, {xgravity: 0,ygravity: 0});
				
					});
			room.setDiscProperties(0, {color: "0xFFA326"});
		}
		//=========== POWERSHOT CODE ===========
		game.lastIsThrowIn = false
		if (game.rsOffSide == true) {
			room.setDiscProperties(1, {radius:0});
			room.setDiscProperties(2, {radius:0});
			game.rsOffSide = false
		}
		if (game.rsReady == true) {
			var players = room.getPlayerList().filter((player) => player.team != 0);
			players.forEach(function(player) {			
				if (room.getPlayerDiscProperties(player.id).invMass.toFixed(1) != 0.3) {
					room.setPlayerDiscProperties(player.id, {invMass: 0.3});

				}
			});
		}
			
		if (game.rsActive == false && game.rsReady == true && (game.rsCorner == true || game.rsGoalKick == true)) { // make game active on kick from CK/GK
			game.boosterState = true;
			
			game.rsActive = true;
			game.rsReady = false; 
			room.setDiscProperties(1, {x: 2000, y: 2000 });
			room.setDiscProperties(2, {x: 2000, y: 2000 }); 
			room.setDiscProperties(0, {color: "0xFFA326"});
			
			game.rsTimer = 1000000;
			game.warningCount++;	
			
			// set gravity for real soccer corners/goalkicks
			if (game.rsCorner == true) {
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed/16*-1, ygravity: (room.getPlayerDiscProperties(player.id).yspeed * 0.1)});
			}	
			if (game.rsGoalKick == true) {		
				room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed/16,ygravity: room.getPlayerDiscProperties(player.id).yspeed * 0.03});			
				//room.setDiscProperties(0, {xgravity: room.getPlayerDiscProperties(player.id).xspeed * 0.008, ygravity: (room.getPlayerDiscProperties(player.id).yspeed * 0.1)});	
			}
			
			game.rsCorner = false;
			game.rsGoalKick = false;
			game.outStatus = "";		
		}		
		
		if (game.rsActive == false && (game.outStatus == "redThrow" || game.outStatus == "blueThrow")) { 		
			game.outStatus = "";
			game.rsActive = true;
			game.rsReady = false;
			game.lastIsThrowIn = true
			room.setDiscProperties(0, {color: "0xFB9C00"});
			game.rsTimer = 1000000;
			game.warningCount++;			
		}	
	}
}

		room.onPlayerKicked = function(kickedPlayer, reason, ban, byPlayer) {	
			if (superAdmins.indexOf(kickedPlayer.id) > -1 && byPlayer != null) {
				room.kickPlayer(byPlayer.id, "You cannot kick/ban a Super Admin", false);
				room.clearBans();
			}
		}

		room.onPlayerChat = function(player, message) {
			console.log(player.name + ": " + message);
			if (message.startsWith("!")) {
				message = message.substr(1);
				let args = message.split(" ");
				
				if (args[0] == "admin" && args.length == 1 && allowPublicAdmin == true) {
					if (isAdminPresent() == false) {
						room.setPlayerAdmin(player.id, true);
					}
					else {
						whisper("Admin is already present or !admin command is not allowed", player.id);
					}
				}
				else if (args[0] == "admin" && args.length == 2) {
					if (args[1] == superAdminCode) {
						room.setPlayerAdmin(player.id, true);
						if (superAdmins.indexOf(player.id) === -1) {
							superAdmins.push(player.id);
						}
						announce(player.name + " has gained Super Admin");
					}
				}
				else if (args[0] == "clearbans") {
					if (player.admin) {
						room.clearBans();
						announce("Bans have been cleared by " + player.name);
					}
					else {
						whisper("Admin only command", player.id);
					}
				}
				else if (args[0] == "court" && args.length == 1) {
					whisper("Current background color is " + mapBGColor);
				}
				else if (args[0] == "court" && args.length == 2 && player.admin) {
					if (room.getScores() == null) {
						if (args[1] == "reset") {
							mapBGColor = "86A578";
							announce("Map background color reset by " + player.name);
						}
						else {
							mapBGColor = args[1];
							announce("Map background color set to " + args[1] + " by " + player.name);
						}
						room.setCustomStadium(getRealSoccerMap());				
					}
					else {
						whisper("Cannot change map background color while game in progress", player.id);
					}
				}
				else if (args[0] == "swap") {
					if (player.admin) {
						if (args.length == 1) {
							var players = room.getPlayerList().filter((player) => player.id != 0 );
							if ( players.length == 0 ) return false;
							players.forEach(function(player) {	
								if (player.team == 1) {
									room.setPlayerTeam(player.id, 2);
								}
								if (player.team == 2) {
									room.setPlayerTeam(player.id, 1);
								}
							});
							announce("🔄 Teams have been swapped");
						}
					}
					else {
						whisper("Admin only command", player.id);
					}
				}
				else if (args[0] == "setpassword" && player.admin) {
					if (superAdmins.indexOf(player.id) > -1) {
						room.setPassword(args[1]);
						roomPassword = args[1];
						announce("Password has been changed by " + player.name);
					}
					else {
						whisper("Only Super Admins can change password", player.id);
					}
				}
				else if (args[0] == "clearpassword" && player.admin) {
					if (superAdmins.indexOf(player.id) > -1) {
						room.setPassword(null);
						roomPassword = null;
						announce("Password has been cleared by " + player.name);
					}
					else {
						whisper("Only Super Admins can clear password", player.id);
					}
				}
				else if (args[0] == "rs" && player.admin) {
					if (room.getScores() == null) {
						room.setCustomStadium(getRealSoccerMap());
					}
					else {
						whisper("Cannot change map while game in progress", player.id);
					}
				}
				else if (args[0] == "rr" && player.admin) {
					room.stopGame();
					room.startGame();
				}
				else if (args[0] == "bb") {
					room.kickPlayer(player.id, "Bye", false);
				}	
				else if ((args[0] == "powershot" || args[0] == "ps") && player.admin) { //ps
				if (powerShotMode == false) {
					powerShotMode = true;
					announce("Powershot đã được bật bởi " + player.name, null, 0x00FF00);
				}
				else {
					powerShotMode = false;
					announce("Powershot đã được tắt bởi " + player.name, null, 0xFF0000);
				}
			}		
				else if (args[0] == "help") {
					displayHelp(player.id, args[1]);
				}
				else if (args[0] == "super") {
					let superMsg = "Super Admins: ";
					superAdmins.forEach(function(id) {
						if (room.getPlayer(id) != null || room.getPlayer(id) != undefined) {
							superMsg = superMsg + room.getPlayer(id).name + ", ";
						}
					});
					if (superAdmins.length > 0) {
						superMsg = superMsg.slice(0, -2); 
					}
					else {
						superMsg = "There are no super admins present";
					}
					whisper(superMsg, player.id);
				}
				else if (args[0] == "spec" ) { // team mode

						room.setPlayerTeam(player.id,0)
						whisper('Bạn đã được di chuyển sang Spectators', player.id);
				   
				}
				
				else if (args[0] == "teamred" && admincontrol == false) { // team mode
					let Red_Count = 0
					let Blue_Count = 0
					room.getPlayerList().forEach(function(player) {
					if (player.team == 1) {
						Red_Count += 1
					}
					else if (player.team == 2){
						Blue_Count += 1
					}
					})
					if (Red_Count < 9){
						room.setPlayerTeam(player.id,1)
						whisper('Bạn đã được di chuyển sang đội RED', player.id);
					}
					else if (Red_Count >= 9) { // RedPlayer_Count
						whisper('Đội RED đã có đủ người chơi', player.id);
					}	
				}
				else if (args[0] == "teamblue" && admincontrol == false) { // team mode

					let Red_Count = 0
					let Blue_Count = 0
					room.getPlayerList().forEach(function(player) {
					if (player.team == 1) {
						Red_Count += 1
					}
					else if (player.team == 2){
						Blue_Count += 1
					}
					})
					if (Blue_Count < 9){
						room.setPlayerTeam(player.id,2)
						whisper('Bạn đã được di chuyển sang đội BLUE', player.id);
					}
					else if (Blue_Count >= 9) { // RedPlayer_Count
						whisper('Đội BLUE đã có đủ người chơi', player.id); 
					}
				}	
				else if (args[0] == "ids") {
					for (var i = 0; i < ids.length; i++) {
						if (ids[i] != undefined) {
						whisper("ID: " + i + " Tên: " + ids[i],player.id);
					}
					}		
				}
				else if (args[0] ==  "votekick" || args[0] == "kickno" || args[0] == "dungkickno"  || args[0] == "huyvotekick") {
					if (args[0] == "votekick") {
						if (votekickdangdienra == false) {
						var ID = parseInt(args[1].toLowerCase());
						if(isNaN(ID)){
						room.sendAnnouncement("Không tìm thấy người chơi này, nhập !ids để biết ID của người chơi ",player.id, 0xd12411, 'bold', 1);
						return false;
						}
						else {
						var p = room.getPlayerList().find(x => x.id == ID);
						}
						if(!p){
							room.sendAnnouncement("Không tìm thấy người chơi này",player.id, 0xd12411,'bold',1);
							return false;
						}
						else {
							bikick[0] = p.id;
							bikick[1] =  p.name;
							announce("📢: " + player.name + " đã mở votekick để kick " + p.name,null, 0x28fa0c, 'bold');
							announce("📢: Nhập !kickno để đồng ý kick hoặc !dungkickno để không đồng ý kick",null, 0x28fa0c, 'bold');
							announce("📢: Đếm ngược 30s xử lý",null, 0x28fa0c, 'bold');
							votekickdangdienra = true;
							setTimeout(function() {
							if (p.admin) {
							announce ("📢: Xử Lý Votekick",null, 0x28fa0c, 'bold');
							announce("📢: Đòi kick Admin à nhóc ?!",player.pm,0x28fa0c);
							kick_count = 0;
							nonkick_count = 0;
							votekickdangdienra = false;
							davote = [];
							}					
							else if (bikick[0] == "Khongco") {
								announce ("📢: Xử Lý Votekick",null, 0x28fa0c, 'bold');
								announce("📢: Admin đã hủy votekick",player.pm,0x28fa0c);
								kick_count = 0;
								nonkick_count = 0;
								votekickdangdienra = false;
								davote = [];
							}
							else if (kick_count > nonkick_count && bikick[0] != undefined) {
								announce ("📢: Xử Lý Votekick",null, 0x28fa0c, 'bold');
								announce ("📢: Số phiếu đồng ý kick:        " + kick_count);
								announce ("📢: Số phiếu không đồng ý kick:  " + nonkick_count);
								announce ("📢: Mời " + bikick[1] + " trăn trối trong 5s", null, 0x13FFFF, 'bold');
								sleep(5000).then(() => {
								room.kickPlayer(p.id,"Bị votekick");
								announce ("Người chơi đã bị kick do số phiếu kick nhiều hơn",null, 0x28fa0c, 'bold');
								});
								kick_count = 0;
								nonkick_count = 0;
								votekickdangdienra = false;
								davote = [];
							}
							else if (kick_count <= nonkick_count && bikick[0] != undefined) {
								announce ("📢: Xử Lý Votekick",null, 0x28fa0c, 'bold');
								announce ("📢: Số phiếu đồng ý kick:        " + kick_count);
								announce ("📢: Số phiếu không đồng ý kick:  " + nonkick_count);
								announce ("📢: Người chơi không bị kick do số phiếu bằng nhau hoặc số phiếu kick ít hơn",null, 0x28fa0c, 'bold');
								kick_count = 0;
								nonkick_count = 0;
								votekickdangdienra = false;
								davote = [];
								}
							},30000); 
							return false;			
						}			
						return false;
					}
					else {whisper("Đang có votekick khác đang diễn ra",player.id);}
					return false;
					}
					if (args[0] == "huyvotekick" && player.admin) {
					bikick[0]= "Khongco";
					whisper("Bạn đã hủy votekick, votekick sẽ tự động bị hủy khi thời gian hết",player.id);
					}
					else if (args[0] == "kickno") {
						if (votekickdangdienra == true) {
							if (davote.includes(player.id) == false) {
							kick_count +=1;
							announce("📢: " + player.name + " đã đồng ý kick " + bikick[1], null, 0x28fa0c, 'bold');
							davote.push(player.id);
							return false;
						}
						else {whisper("Bạn đã vote rồi!",player.id); }
						}
						else {	whisper("Không có cuộc votekick nào đang diễn ra cả. Nhập !votekick id để mở votekick",player.id);}
					}
					else if (args[0] == "dungkickno") {
						if (votekickdangdienra == true) {
							if (davote.includes(player.id) == false) {
							nonkick_count +=1;
							announce("📢: " + player.name + " đã không đồng ý kick " + bikick[1], null, 0x28fa0c, 'bold');
							davote.push(player.id);
							return false;
						}
						else {whisper("Bạn đã vote rồi!",player.id); }
						}
						else { whisper("Không có cuộc votekick nào đang diễn ra cả. Nhập !votekick id để mở votekick",player.id);}
					}
					
				}	
				else if (args[0] == "admin_takecontrol") {
					if (player.admin) {
						if (admincontrol == false ) {
							admincontrol = true;
							announce("Admin đã giành quyền điều khiển", player.pm, 0xFFFFFF, 'bold',1 );
						} 
						else { 
							admincontrol = false;
							announce("Admin đã hết giành quyền điều khiển", player.pm, 0xFFFFFF, 'bold',1 );
						}
					}			
				}
				else if (args[0] == "dangky") {
					var playerData = localStorage.getItem(player.name);
					if (playerData) { whisper("Tài khoản đã tồn tại. Nhập !dangnhap matkhau để đăng nhập!",player.id); }
					else {
						var dataForm = {
							'playerName' : player.name,
							'pass' : args[1],
							'games' : 0,
							'win' : 0,
							'lose' : 0,
							'draw' : 0,
							'goals' : 0,
							'assists' : 0,
							'owngoals' : 0,
							'points' : 0,
							'money' : 0,
							'level' : 'E',
						}
						localStorage.setItem(player.name, JSON.stringify(dataForm));
						addValue(player.name);
						whisper("Đăng ký thành công! Nhập !dangnhap matkhau để đăng nhập", player.id, null, 'bold');
					}			
				}
				else if (args[0] == "dangnhap") {
					var playerData = localStorage.getItem(player.name);
					if (playerData) {
						var data = JSON.parse(localStorage.getItem(player.name));
						if (args[1] == data.pass) {
							if (!logged.includes(player.name)) {
								announce("💫 Người chơi " + player.name + " [Rank " + data.level + "]" + " đã đăng nhập",null,0xead1dc);
								updateRank();
								addValue(player.name);
								logged.push(player.name);
								console.log(logged);
							}
							else {
								whisper("Bạn đã đăng nhập rồi!",player.id, null, 'bold');
							}
						}
						else {
							whisper("Sai mật khẩu!",player.id, null, 'bold');
						}
					}
					else {
						whisper("Tài khoản không tồn tại",player.id, null, 'bold');
					}
				}
				else if (args[0] == "stats") {
					var playerData = localStorage.getItem(player.name);
					if (playerData ) {
						if (logged.includes(player.name)) {
							updateRank();
							var data = JSON.parse(localStorage.getItem(player.name));
							whisper("Games: " + data.games, player.id, 0xead1dc, 'bold', 0);
							whisper("Bàn thắng: " + data.goals + " | Kiến tạo: " + data.assists + " | Phản lưới: " + data.owngoals, player.id, 0xead1dc, 'bold', 0);
							whisper("Trận thắng: " + data.win + " | Trận thua: " + data.lose + " | Trận hòa: " + data.draw,player.id, 0xead1dc, 'bold', 0); 
							whisper("Số tiền hiện có: " + numberWithCommas(data.money)+"đ" ,player.id, 0xead1dc, 'bold', 0); 
						}
						else {
							whisper("Bạn chưa đăng nhập!", player.id, 0xead1dc, 'bold', 2);
						}
					}
					else {
						whisper("Bạn chưa có tài khoản. !dangky matkhau để đăng ký", player.id, 0xead1dc, 'bold', 2);
					}
				}
				else if (args[0] == "rank") {
					var playerData = localStorage.getItem(player.name);
					if (playerData ) {
						updateRank();
						if (logged.includes(player.name)) {
							var data = JSON.parse(localStorage.getItem(player.name));
							whisper("Rank: " + data.level, player.id, 0xead1dc, 'bold', 0);
							whisper("Điểm: " + data.points, player.id, 0xead1dc, 'bold',0);
						}
						else {
							whisper("Bạn chưa đăng nhập!", player.id, 0xead1dc, 'bold', 2);
						}
					}
					else {
						whisper("Bạn chưa có tài khoản. !dangky matkhau để đăng ký", player.id, 0xead1dc, 'bold', 2);
					}
				}
				else if (args[0] == "tai") {
					var money = parseInt(args[1]);
					if (taixiudangdienra) {
						if (logged.includes(player.name)) {
							var data = JSON.parse(localStorage.getItem(player.name));
							if (money > 1000) {
								if (data.money >= money) {
									if (!datcuoc_player.includes(player.id)) {
										taiPlayer[player.id] = money;
										announce("📢: Người chơi " + player.name + " đã đặt " + numberWithCommas(money) + "đ vào Tài!!!",null,0xFFCFCB);
										datcuoc_player.push(player.id);
										data.money -= money;
										localStorage.setItem(player.name, JSON.stringify(data));
									}
									else {
										whisper("Bạn đã đặt cược rồi!", player.id, null, 'bold',2);
									}
								}
								else {
									whisper("Tài khoản không đủ tiền", player.id, null, 'bold',2);
								}
							}
							else {
								whisper("Mức cược bạn cần đặt phải lớn hơn 1,000đ", player.id, null, 'bold',2);
							}
						}
						else {
							whisper("Bạn chưa đăng nhập!", player.id, null, 'bold',2);
						}
					}
					else {
						whisper("Tài xỉu chưa diễn ra", player.id, null, 'bold',2);
					}
				}
				else if (args[0] == "xiu") {
					var money = parseInt(args[1]);
					if (taixiudangdienra) {
						if (logged.includes(player.name)) {
							var data = JSON.parse(localStorage.getItem(player.name));
							if (money > 1000) {
								if (data.money > money) {
									if (!datcuoc_player.includes(player.id)) {
										xiuPlayer[player.id] = money;
										announce("📢: Người chơi " + player.name + " đã đặt " + numberWithCommas(money) + "đ vào Xỉu!!!",null,0xFFCFCB);
										datcuoc_player.push(player.id);
										data.money -= money;
										localStorage.setItem(player.name, JSON.stringify(data));
									}
									else {
										whisper("Bạn đã đặt cược rồi",player.id);
									}
								}
								else {
									whisper("Tài khoản không đủ tiền", player.id, null, 'bold',2);
								}
							}
							else {
								whisper("Mức cược bạn cần đặt phải lớn hơn 1,000đ", player.id, null, 'bold',2);
							}
						}
						else {
							whisper("Bạn chưa đăng nhập!", player.id, null, 'bold',2);
						}
					}
					else {
						whisper("Tài xỉu chưa diễn ra", player.id, null, 'bold',2);
					}
				}
				else if (args[0] == "shop") {
					if (logged.includes(player.name)) {
						if (args[1] == undefined) {
						whisper('-----------Cách Mua-----------------------------' ,player.id,0xD7BDE2,'bold')
						whisper('!shop [id vật phẩm] để mua' ,player.id,0xD4EFDF)
						whisper('----------------------Hiện có----------------------' ,player.id,0xE6B0AA,'bold')
						whisper('Màu bóng: Tím Quyền Lực(Giá: 20,000,000đ | ID: maubong_tim)' ,player.id,0xF2D7D5)
						whisper('Màu bóng: Xanh Đậm (Giá: 1,000,000đ | ID: maubong_xanhdam)' ,player.id,0xF2D7D5)
						whisper('Màu bóng: Màu Hồng Nam Tính (Giá: 5,000,000đ | ID: maubong_hong)' ,player.id,0xF2D7D5)
						whisper('Màu bóng: Xanh Nước Sáng Chói (Giá: 2,000,000đ | ID: maubong_xanhsang)' ,player.id,0xF2D7D5)
						whisper('Màu bóng: Đỏ  (Giá: 1,000,000đ | ID: maubong_do)' ,player.id,0xF2D7D5)				
						whisper('Màu bóng: Xanh Lá Vàng (Giá: 300,000đ | ID: maubong_xanhlavang)' ,player.id,0xF2D7D5)
						whisper('Màu bóng: Cam (Giá: 1,000,000đ | ID: maubong_cam)' ,player.id,0xF2D7D5) 
						whisper('Đặt biệt danh cho riêng mình(Giá: 10,500,000đ)' ,player.id,0xF2D7D5);
						}
						switch(args[1]) {
							case 'maubong_tim': 
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 20000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('tim')) {
								data.money -= 10000000;
								data['tuido']['list_maubong'].push('tim');
								whisper('Đã mua màu bóng : Tím !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_xanhdam' : 
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 1000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('xanhdam')) {
								data.money -= 1000000;
								data['tuido']['list_maubong'].push('xanhdam');
								whisper('Đã mua màu bóng : Xanh Đậm !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_do': 
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 1000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('do')) {
								data.money -= 1000000;
								data['tuido']['list_maubong'].push('do');
								whisper('Đã mua màu bóng : Đỏ !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_hong' :
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 3000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('hong')) {
								data.money -= 5000000;
								data['tuido']['list_maubong'].push('hong');
								whisper('Đã mua màu bóng : Hồng Nam Tính !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_xanhsang': 
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 2000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('xanhsang')) {
								data.money -= 2000000;
								data['tuido']['list_maubong'].push('xanhsang');
								whisper('Đã mua màu bóng : Xanh Sáng Chói !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_xanhlavang' :
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 300000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('xanhlavang')) {
								data.money -= 300000;
								data['tuido']['list_maubong'].push('xanhlavang');
								whisper('Đã mua màu bóng : Xanh Lá Vàng !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
							case 'maubong_cam' : 
							var data = JSON.parse(localStorage.getItem(player.name));
							if (data.money < 1000000) {
								whisper("Tài khoản không đủ tiền!", player.id, null, 'bold', 2);
								return false;
								break;
							}
							if (!data['tuido']['list_maubong'].includes('cam')) {
								data.money -= 1000000;
								data['tuido']['list_maubong'].push('cam');
								whisper('Đã mua màu bóng : Cam !' ,player.id,0xAED6F1 ,'bold');
								whisper('Nhãy nhập !maubong để xem id và !sudungmaubong để sử dụng' ,player.id,0xAED6F1 ,'bold');
								localStorage.setItem(player.name,JSON.stringify(data));
								break;
							}
							else {
								whisper("Bạn đã sở hữu màu bóng này rồi!",player.id);
								break;
							}
						}
					}
				}
				else if (args[0] == "maubong") {
					if (logged.includes(player.name)) {
						var tt_string = '';
						var data = JSON.parse(localStorage.getItem(player.name))
							if (data['tuido']['list_maubong'].length <= 0) { 
							whisper('Bạn không sở hữu màu bóng nào',player.id ,0xD7BDE2)
							return false;
								}
							for (m in data['tuido']['list_maubong']) {
								let mau = "'" + data['tuido']['list_maubong'][m] + "'";
								console.log(mau);
								tt_string += ball_color[data['tuido']['list_maubong'][m]][0] + " (ID: " + data['tuido']['list_maubong'][m] + "), "
							}
							whisper('Màu bóng đang có: ' + tt_string,player.id,0xD7BDE2,'bold' )
					}
				}
				else if (args[0] == "sudungmaubong") {
					if (logged.includes(player.name)){ 
					var data = JSON.parse(localStorage.getItem(player.name));
						if (args[1] == undefined) {
							whisper('Vui lòng nhập id của màu bóng VD: !sudungmaubong tim',player.id,0xD7BDE2 )
							whisper('Để sử dụng màu mặc định hãy nhập: !sudungmaubong none',player.id ,0xD7BDE2)
							return false;
							}
						if (data['tuido']['list_maubong'] <= 0) {
							whisper('Không có màu bóng nào!',player.id )
							return false;
							}
						if (args[1] == 'none') {
							data['cur_maubong'] = 'none'
							whisper('Bạn không còn sử dụng màu bóng! ' ,player.id,0xD7BDE2 )
							
							
							return false;
						}
						if (data['tuido']['list_maubong'].includes(args[1])) {
							data['cur_maubong'] = args[1]
							whisper('Bạn đã sử dụng màu bóng: ' + ball_color[args[1]][0]  ,player.id,0xD7BDE2 )
							
							
						}
						localStorage.setItem(player.name,JSON.stringify(data));						
					}
				}
				else if (args[0] == "datbietdanh") {
					var id_bietdanh = args[1];
					var bietdanh = '';
					var tt_bietdanh = '';
					for (var i = 2; i < args.length; i++) {
						tt_bietdanh += args[i]+ " ";
					}
					bietdanh = tt_bietdanh.trim();
					if (logged.includes(player.name)) {
						var data = JSON.parse(localStorage.getItem(player.name));
						if (data.money > 10500000) {
							if (!data['tuido']['list_bietdanh'].includes(id_bietdanh)) {
								data['tuido']['list_bietdanh'].push(id_bietdanh);
								data['cac_bietdanh'].push(bietdanh);
								data.money -= 10500000;
								localStorage.setItem(player.name,JSON.stringify(data));
								whisper("Bạn đã đặt biệt danh: " + bietdanh + " (ID: " + id_bietdanh + ")",player.id);
							} 
							else {
							whisper("Bạn đã tạo biệt danh bằng ID này rồi",player.id);
							}
						}
						else {
							whisper("Tài khoản không đủ tiền!",player.id);
						}					
					}
					else {
						whisper("Bạn chưa đăng nhập!",player.id);
					}
				}
				else if (args[0] == "laybietdanh") {
					if (logged.includes(player.name)) {
						var data = JSON.parse(localStorage.getItem(player.name));
						if (args[1] == 'none') {
							data.cur_biet_danh = '';
							whisper("Bạn không còn sử dụng biệt danh!",player.id);
							localStorage.setItem(player.name, JSON.stringify(data));
						}
						else {
							for (var i = 0; i < data.cac_bietdanh.length; i++) {
								if (data['tuido']['list_bietdanh'][i] == args[1]) {
									data.cur_biet_danh = data['cac_bietdanh'][i];
									whisper("Sử dụng thành công biệt danh: " + data['cac_bietdanh'][i] + " (ID: " + data['tuido']['list_bietdanh'][i] + ")",player.id);
									localStorage.setItem(player.name, JSON.stringify(data));						
								}
							}
						}
					}
					else {
						whisper("Bạn chưa đăng nhập!", player.id);
					}
				}
				else if (args[0] == "bietdanh") {
					var tt_string = '';
					if (logged.includes(player.name)) {
						var data = JSON.parse(localStorage.getItem(player.name));
						if (data['cac_bietdanh'].length > 0) {
							for ( var i = 0; i < data.cac_bietdanh.length; i++) {
								tt_string += data['cac_bietdanh'][i] + " (ID: " + data['tuido']['list_bietdanh'][i] + "), "
							}
							whisper('Các biệt danh đang có: ' + tt_string,player.id,0xD7BDE2,'bold' );
							whisper('Nhập !laybietdanh none để hủy sử dụng biệt danh',player.id,0xD7BDE2,'bold' );
						}
						else {
							whisper('Bạn không sỡ hữu biệt danh nào cả!' ,player.id,0xD7BDE2,'bold' );
						}
					}
					else {
						whisper("Bạn chưa đăng nhập!",player.id);
					}
				}
				else if (args[0] == "cachsudung") {
					whisper('----------------------Cách sử dụng----------------------' ,player.id,0xA3E4D7 ,'bold')
					whisper('Nhập !maubong để xem id màu bóng' ,player.id,0xD1F2EB)
					whisper('!sudungmaubong [id maubong] | VD: !sudungmaubong tim' ,player.id,0xD1F2EB)					
					whisper('Nhập !datbietdanh id(tự chọn) [Biệt Danh] | VD: !datbietdanh deptrai Đẹp trai Nhất Thế Giới' ,player.id,0xD1F2EB)
					whisper('Nhập !bietdanh để xem id biệt danh của mình' ,player.id,0xD1F2EB)
					whisper('Nhập !laybietdanh id để sử dụng biệt danh' ,player.id,0xD1F2EB)
					whisper('Nhập !laybietdanh none để hủy sử dụng biệt danh',player.id,0xD1F2EB );
				}
				else if (args[0] == "rank_help") {
					whisper("Rank E<100, 100 <= Rank D < 300, 300 <= Rank C < 500, 500 <= Rank B < 800, 800 <= Rank A < 1500, 1500<= Rank S",player.id);
					whisper("Ghi bàn: 5 điểm, Kiến tạo: 3 điểm, Phản lưới: -4 điểm, Thắng: 3 điểm, Hòa: 1 điểm, Thua: -5 điểm",player.id);
				}
	 			else if (args[0] == "test_ti") {
					Storage(player.name, "money",1000000);
					let variable1 = args[1];
					let variable2 = args[2];
					Storage(player.name, variable1, variable2);
				}
				else if (args[0] == "chuyentien") {
					var ID = parseInt(args[1]);
					if(isNaN(ID)){
					room.sendAnnouncement("Không tìm thấy người chơi này, nhập !ids để biết ID của người chơi ",player.id, 0xd12411, 'bold', 1);
					return false;
					}
					else {
					var p = room.getPlayerList().find(x => x.id == ID);
					}
					if(!p){
						room.sendAnnouncement("Không tìm thấy người chơi này",player.id, 0xd12411,'bold',1);
						return false;
					}
					if (!isNaN(Number(args[2]))) {
						var money = Number(args[2]);
						if (logged.includes(player.name)) {
							if (getData(player, "money") >= money) {
								if (logged.includes(p.name)) {
									Storage(p, "money", money);
									Storage(player, "money", -money);
                                    whisper(player.name + " đã chuyển cho bạn " + numberWithCommas(money) + "đ",p.id);
                                    whisper("Bạn đã chuyển cho " + p.name + numberWithCommas(money) + "đ",player.id);
								}
								else {
									whisper("Đối phương chưa đăng nhập", player.id, null, 'bold',2);	
								}
							}
							else {
								whisper("Tài khoản không đủ tiền", player.id, null, 'bold',2);
							}
						}
						else {
							whisper("Bạn chưa đăng nhập!", player.id, null, 'bold',2);
						}
					}
					else {
						whisper("Số tiền không hợp lệ", player.id, null, 'bold',2);	
					}
				}
				return false;
			}
			if (message.startsWith("@@")) {
				message = message.substr(2).trim();
				if (message.indexOf(' ') !== -1) {
					let args = message.match(/^(\S+)\s(.*)/).slice(1);
					
					if (args.length > 1) {
						var pmMsg = args[1];
						var players = room.getPlayerList();
						var pmSent = false;
						players.forEach(function(pmPlayer) {
							if (pmPlayer.name === args[0] || pmPlayer.name === args[0].replace(/_/g, ' ')) {
								whisper("[PM > " + pmPlayer.name + "] " + player.name + ": " + pmMsg, player.id, 0xff20ff, "normal", 1);	
								whisper("[PM] " + player.name + ": " + pmMsg, pmPlayer.id, 0xff20ff, "normal", 1);
								pmSent = true;					
							}
						});
						if (pmSent == false) {
							whisper("Cannot find user '" + args[0] + "'", player.id, 0xff20ff, "normal", 1);
						}
						return false;
					}
				}			
			}
			else {
					message = message.substr(0);			
					var players = room.getPlayerList();
					players.forEach(function(Chat) {		
						if (logged.includes(player.name)) {
							var data = JSON.parse(localStorage.getItem(player.name));
							var tt_text = ' '
							if (data.cur_biet_danh== '' || data.cur_biet_danh == undefined) tt_text = '' + player.name
							else  tt_text = '['+ data.cur_biet_danh +'] ' + player.name; 						
							if (data.level != 'B' && data.level != 'A' && data.level != 'S') {
								var name = player.name;
								if (player.team == 1) {
									announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text  + ": " + message, Chat.id, 0xFF0000, 'normal',0);
									return false;
								}
								else if (player.team ==2) {
									announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text +  ": " + message, Chat.id, 0x3dacff, 'normal',0);
									return false;
								}
								else if (player.team == 0) {
									announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text + ": " + message, Chat.id, 0xFFFFFF, 'normal',0);
									return false;
								}
								return false;
							}
							else if (data.level == 'S') {
								announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text + ": " + message, Chat.id, 0xff8000, 'normal',1);
							}
							else if (data.level == 'A') {
								announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text + ": " + message, Chat.id, 0x9849e4, 'normal',1);
							}
							else if (data.level == 'B') {
								announce("[ID: " + player.id + "] " + "[Rank: " + data.level + "] " + tt_text + ": " + message, Chat.id, 0x00ff00, 'normal',1);
							}
							return false;
						}		
					else {
						if (player.team == 1) {
							announce("[ID: " + player.id + "] " + player.name + ": " + message, Chat.id, 0xff8c69 , 'normal',0);
						}
						if (player.team == 2) {
							announce("[ID: " + player.id + "] " + player.name + ": " + message,Chat.id, 0x03f8fc, 'normal',0);
						}
						if (player.team == 0) {
							announce("[ID: " + player.id + "] " + player.name + ": " + message, Chat.id, 0xe4ebe4, 'normfal',0);
						} 
						return false;
					}	
				   });
				   return false;
				}
		}

		function displayHelp(id, selection) {
			if (selection == null) {
				whisper("!votekick để mở votekick", id, null, "small");
				whisper("!shop để mua đồ, nhấn !cachsudung để xem sử dụng", id, null, "small");
				whisper("!dangky để đăng ký, !dangnhap để đăng nhập", id, null, "small");
				whisper("!ids để biết danh sách ID người chơi", id, null, "small");
				whisper("!rank_help để biết thêm về rank, Nhấn !rank để xem rank, nhấn !stats để xem tiền và chỉ số ", id, null, "small");
				whisper("Commands: !rs, !rr, !bb, !powershot, !ps, !admin, !setpassword, !clearpassword, !super, !clearbans, !swap, t [team chat msg], !court, !court [hexcolor], !court reset", id, null, "small");
			}
		}


		room.onTeamGoal = function(team) {
			if (map == "RSR") {
				game.rsActive = false;
				
				let goalTime = secondsToMinutes(Math.floor(room.getScores().time));
				let scorer;
				let assister = "";
				let goalType;
				if (team == 1) {
					if (game.lastKickerTeam == 1) { //if goal type is goal
						goalType = "GOAL!";
						scorer = "⚽" + game.lastKickerName;
						avatarCelebration(game.lastKickerId, "⚽");
						if (logged.includes(game.lastKickerName)) {
							var data = JSON.parse(localStorage.getItem(game.lastKickerName));
							data.goals += 1;
							data.points += 5;
							data.money += 10000;
							updateRank();
							localStorage.setItem(game.lastKickerName, JSON.stringify(data));
							announce("Người chơi " + game.lastKickerName + " nhận được 10,000đ từ việc ghi bàn!",null, 0xE7F9F0);
							console.log(data);
						}
						if (game.secondLastKickerTeam == 1 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
							assister = " (Assist: " + game.secondLastKickerName + ")";
							avatarCelebration(game.secondLastKickerId, "🅰️");
							if (logged.includes(game.secondLastKickerName)) {
								var data = JSON.parse(localStorage.getItem(game.secondLastKickerName));
								data.assists += 1;
								data.points += 3;
								data.money += 5000;
								updateRank();
								localStorage.setItem(game.secondLastKickerName, JSON.stringify(data));
								announce("Người chơi " + game.secondLastKickerName + " nhận được 5,000đ từ việc kiến tạo!",null, 0xE7F9F0);
								console.log(data);
							}
						}
					}		
					if (game.lastKickerTeam == 2) { //if goal type is owngoal
						goalType = "OWN GOAL!";
						scorer = "🐸" + game.lastKickerName;
						avatarCelebration(game.lastKickerId, "🐸");
						if (logged.includes(game.lastKickerName)) {
							var data = JSON.parse(localStorage.getItem(game.lastKickerName));
							data.owngoals += 1;
							data.points -= 4;
							updateRank();
							localStorage.setItem(game.lastKickerName, JSON.stringify(data));
							console.log(data);
						}
						if (game.secondLastKickerTeam == 1) { // if owngoal was assisted
							assister = " (Assist: " + game.secondLastKickerName + ")";
							avatarCelebration(game.secondLastKickerId, "🅰️");
							if (logged.includes(game.secondLastKickerName)) {
								var data = JSON.parse(localStorage.getItem(game.secondLastKickerName));
								data.assists += 1;
								data.points += 3;
								data.money += 5000;
								updateRank();
								localStorage.setItem(game.secondLastKickerName, JSON.stringify(data));
								announce("Người chơi " + game.secondLastKickerName + " nhận được 5,000đ từ việc kiến tạo!",null, 0xE7F9F0);
								console.log(data);
							}
						}
					}
					game.redScore++;
				}
				if (team == 2) {
					if (game.lastKickerTeam == 2) { //if goal type is goal
						goalType = "GOAL!";
						scorer = "⚽" + game.lastKickerName;
						avatarCelebration(game.lastKickerId, "⚽");
						if (logged.includes(game.lastKickerName)) {
							var data = JSON.parse(localStorage.getItem(game.lastKickerName));
							data.goals += 1;
							data.points += 5;
							data.money += 10000;
							updateRank();
							localStorage.setItem(game.lastKickerName, JSON.stringify(data));
							announce("Người chơi " + game.lastKickerName + " nhận được 10,000đ từ việc ghi bàn!",null, 0xE7F9F0);
							console.log(data);
						}
						if (game.secondLastKickerTeam == 2 && game.lastKickerId != game.secondLastKickerId) { // if assist is from teammate
							assister = " (Assist: " + game.secondLastKickerName + ")";
							avatarCelebration(game.secondLastKickerId, "🅰️");
							if (logged.includes(game.secondLastKickerName)) {
								var data = JSON.parse(localStorage.getItem(game.secondLastKickerName));
								data.assists += 1;
								data.points += 3;
								data.money += 5000;
								updateRank();
								localStorage.setItem(game.secondLastKickerName, JSON.stringify(data));
								announce("Người chơi " + game.secondLastKickerName + " nhận được 5,000đ từ việc kiến tạo!",null, 0xE7F9F0);
								console.log(data);
							}
						}
					}		
					if (game.lastKickerTeam == 1) { //if goal type is owngoal
						goalType = "OWN GOAL!";
						scorer = "🐸" + game.lastKickerName;
						avatarCelebration(game.lastKickerId, "🐸");
						if (logged.includes(game.lastKickerName)) {
							var data = JSON.parse(localStorage.getItem(game.lastKickerName));
							data.owngoals += 1;
							data.points -= 4;
							updateRank();
							localStorage.setItem(game.lastKickerName, JSON.stringify(data));
							console.log(data);
						}
						if (game.secondLastKickerTeam == 2) { // if owngoal was assisted
							assister = " (Assist: " + game.secondLastKickerName + ")";
							avatarCelebration(game.secondLastKickerId, "🅰️");
							if (logged.includes(game.secondLastKickerName)) {
								var data = JSON.parse(localStorage.getItem(game.secondLastKickerName));
								data.assists += 1;
								data.points += 3;
								data.money += 5000;
								updateRank();	
								localStorage.setItem(game.secondLastKickerName, JSON.stringify(data));
								announce("Người chơi " + game.secondLastKickerName + " nhận được 5,000đ từ việc kiến tạo!",null, 0xE7F9F0);
								console.log(data);
							}
						}
					}
					game.blueScore++;
				}
				announce(goalType + " 🟥 " + game.redScore + " - " + game.blueScore + " 🟦 🕒" + goalTime + " " + scorer + assister);
				game.lastKicker = undefined;
				game.secondLastKicker = undefined;
				game.lastKickerTeam = undefined;
				game.secondLastKickerTeam = undefined;
			}
		}

		room.onPositionsReset = function() {
			if (map == "RSR") {
				if (game.lastPlayAnnounced == true) {
					room.stopGame(true);
					game.lastPlayAnnounced = false;
					endGame();
					announce("END");
				}
			}
		}

		room.onGameTick = function() {
			if (map == "RSR") {
				updateGameStatus();
				handleBallTouch();
				realSoccerRef();
			}	
		}
		function realSoccerRef() {
	blockThrowIn();
	blockGoalKick();
	removeBlock();
	if (game.time == gameTime * 60 && game.extraTimeAnnounced == false) {
		extraTime();
		game.extraTimeAnnounced = true;
	}
	
	if (game.time == game.extraTimeEnd && game.lastPlayAnnounced == false) {
		announce( "📢:"+"Lần Gỡ Cuối", null, null, null, 1);
		game.lastPlayAnnounced = true;
	}
	
	if (game.rsCorner == true || game.rsGoalKick == true) { //add extra time
		game.extraTimeCount++;
	}
	
	if (game.rsTimer < 99999 && game.paused == false && game.rsActive == false && game.rsReady == true) {
		game.rsTimer++;
	}
	
	if (game.rsSwingTimer < 150 && game.rsCorner == false && game.rsGoalKick == false) {
		game.rsSwingTimer++;
		if (game.rsSwingTimer > 5) {
			room.setDiscProperties(0, {xgravity: room.getDiscProperties(0).xgravity * 0.97, ygravity: room.getDiscProperties(0).ygravity * 0.97});
		}		
		if (game.rsSwingTimer == 150) {
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
		}
	}
	
	
	if (game.boosterState == true) {
		game.boosterCount++;
	}
	
	if (game.boosterCount > 30) {
		game.boosterState = false;
		game.boosterCount = 0;
		room.setDiscProperties(0, {cMask: 63});
	}
	
	
	if (room.getBallPosition().x == 0 && room.getBallPosition().y == 0) {	
		game.rsActive = true;
		game.outStatus = "";
	}
	
	if (game.rsActive == false && game.rsReady == true) { //expire barrier time
		if (game.outStatus == "redThrow") {
			if (game.rsTimer == throwTimeOut - 120) { // warning indicator
				ballWarning("0xff3f34", ++game.warningCount);
			}
			if (game.rsTimer == throwTimeOut && game.bringThrowBack == false) { // switch to blue throw
				game.outStatus = "blueThrow";
				game.rsTimer = 0;				
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {color: "0x0fbcf9", xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
		}
		else if (game.outStatus == "blueThrow") {
			if (game.rsTimer == throwTimeOut - 120) { // warning indicator
				ballWarning("0x0fbcf9", ++game.warningCount);
			}
			if (game.rsTimer == throwTimeOut && game.bringThrowBack == false) { // switch to red throw
				game.outStatus = "redThrow";
				game.rsTimer = 0;						
				room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				sleep(100).then(() => {
					room.setDiscProperties(0, {color: "0xff3f34", xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY});
				});
			}
		}
		else if (game.outStatus == "blueGK" || game.outStatus == "redGK") {
			if (game.rsTimer == gkTimeOut - 120) { // warning indicator
				if (game.outStatus == "blueGK") {
					ballWarning("0x0fbcf9", ++game.warningCount);
				}
				if (game.outStatus == "redGK") {
					ballWarning("0xff3f34", ++game.warningCount);
				}
			}
			if (game.rsTimer == gkTimeOut) {
				game.outStatus = "";
				room.setDiscProperties(0, {color: "0xFFA326"});
				game.rsTimer = 1000000;							
			}
		}
		else if (game.outStatus == "blueCK" || game.outStatus == "redCK") {
			if (game.rsTimer == ckTimeOut - 120) {
				if (game.outStatus == "blueCK") {
					ballWarning("0x0fbcf9", ++game.warningCount);
				}
				if (game.outStatus == "redCK") {
					ballWarning("0xff3f34", ++game.warningCount);
				}
			}
			if (game.rsTimer == ckTimeOut) {
				game.outStatus = "";
				room.setDiscProperties(1, {x: 0, y: 2000, radius: 0});
				room.setDiscProperties(2, {x: 0, y: 2000, radius: 0});
				room.setDiscProperties(0, {color: "0xFFA326"});
				game.rsTimer = 1000000;							
			}
		}
	}
	
	if (game.rsActive == true) {
		if ((room.getBallPosition().y > 611.45 || room.getBallPosition().y < -611.45)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
			room.stopGame(true);
    		game.lastPlayAnnounced = false;
       	 	announce( "📢:"+"Trận đấu đã kết thúc");
				announce("Kết quả cuối cùng" + " 🟥 " + game.redScore + " - " + game.blueScore + " 🟦 ");
				announce( "📢:"+"Trận đấu sẽ bắt đầu sao 10 giây");
        	sleep(10000).then(() => {
        	room.startGame(true);
        	});
			}
			
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			
			game.ballOutPositionX = Math.round(room.getBallPosition().x * 10) / 10;
			if (room.getBallPosition().y > 611.45) {
				game.ballOutPositionY = 400485;
				game.throwInPosY = 610;
			}
			if (room.getBallPosition().y < -611.45) {
				game.ballOutPositionY = -400485;
				game.throwInPosY = -610;
			}
			if (room.getBallPosition().x > 1130) {
				game.ballOutPositionX = 1130;
			}
			if (room.getBallPosition().x < -1130) {
				game.ballOutPositionX = -1130;
			}
			
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "blueThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("🖐️ Throw In: 🔵 Blue");
					room.setDiscProperties(0, {color: "0x0fbcf9"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {				
				room.setDiscProperties(3, {x: game.ballOutPositionX, y: game.throwInPosY, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redThrow";
					game.throwinKicked = false;
					game.rsTimer = 0;
					game.rsReady = true;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: game.ballOutPositionX, y: game.throwInPosY, xgravity: 0, ygravity: 0});
					//announce("🖐️ Throw In: 🔴 Red");
					room.setDiscProperties(0, {color: "0xff3f34"});				
				});	
				sleep(100).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	
		if (room.getBallPosition().x > 1166.45 && (room.getBallPosition().y > 99 || room.getBallPosition().y < -99)) {
			game.rsActive = false;	
			if (game.lastPlayAnnounced == true) {
				room.stopGame(true);
    		game.lastPlayAnnounced = false;
        	announce( "📢:"+"Trận đấu đã kết thúc");
				announce("Kết quả cuối cùng" + " 🟥 " + game.redScore + " - " + game.blueScore + " 🟦 ");
				announce( "📢:"+"Trận đấu sẽ bắt đầu sao 10 giây");
        	sleep(10000).then(() => {
        	room.startGame(true);
        	});
			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				room.setDiscProperties(3, {x: 1060, y: 0, radius: 18 });
				sleep(100).then(() => {					
					game.outStatus = "blueGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("🥅 Goal Kick: 🔵 Blue");
					game.rsGoalKick = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: 1060, y: 0, color: "0x0fbcf9", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
			else {	
				//announce("🚩 Corner Kick: 🔴 Red");							
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -99) {					
					room.setDiscProperties(3, {x: 1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: -590, xspeed: 0, yspeed: 0, color: "0xff3f34", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: -670, radius: 420 });
						room.setDiscProperties(0, {invMass: 1.8});
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
				if (room.getBallPosition().y > 99) {
					room.setDiscProperties(3, {x: 1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.outStatus = "redCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: 1140, y: 590, xspeed: 0, yspeed: 0, color: "0xff3f34", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(2, {x: 1150, y: 670, radius: 420 });
						room.setDiscProperties(0, {invMass: 1.8});
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});
				}
			}
		}
		if (room.getBallPosition().x < -1166.45 && (room.getBallPosition().y > 99 || room.getBallPosition().y < -99)) {
			game.rsActive = false;
			if (game.lastPlayAnnounced == true) {
			room.stopGame(true);
    		game.lastPlayAnnounced = false;
        	announce( "📢:"+"Trận đấu đã kết thúc");
				announce("Kết quả cuối cùng" + " 🟥 " + game.redScore + " - " + game.blueScore + " 🟦 ");
				announce( "📢:"+"Trận đấu sẽ bắt đầu sao 10 giây");
        	sleep(10000).then(() => {
        	room.startGame(true);
        	});
			}
			room.setDiscProperties(0, {xgravity: 0, ygravity: 0});
			room.getPlayerList().forEach(function(player) {
				room.setPlayerDiscProperties(player.id, {invMass: 100000});
			});
			
			if (game.rsTouchTeam == 1) {				
				//announce("🚩 Corner Kick: 🔵 Blue");				
				game.rsSwingTimer = 0;
				if (room.getBallPosition().y < -99) {
					room.setDiscProperties(3, {x: -1140, y: -590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: -590, xspeed: 0, yspeed: 0, color: "0x0fbcf9", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: -670, radius: 420 });
						room.setDiscProperties(0, {invMass: 1.8});
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});	
				}
				if (room.getBallPosition().y > 99) {
					room.setDiscProperties(3, {x: -1140, y: 590, radius: 18 });
					sleep(100).then(() => {
						game.rsCorner = true;
						game.outStatus = "blueCK";
						game.rsTimer = 0;
						game.rsReady = true;
						game.boosterCount = 0;
						game.boosterState = false;
						room.setDiscProperties(0, {x: -1140, y: 590, xspeed: 0, yspeed: 0, color: "0x0fbcf9", cMask: 268435519, xgravity: 0, ygravity: 0});
						room.setDiscProperties(1, {x: -1150, y: 670, radius: 420 });
						room.setDiscProperties(0, {invMass: 1.8});
						room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
					});		
				}				
			}
			else {				
				room.setDiscProperties(3, {x: -1060, y: 0, radius: 18 });
				sleep(100).then(() => {
					game.outStatus = "redGK";
					game.rsTimer = 0;
					game.rsReady = true;
					//announce("🥅 Goal Kick: 🔴 Red");
					game.rsGoalKick = true;
					game.rsSwingTimer = 0;
					game.boosterCount = 0;
					game.boosterState = false;
					room.setDiscProperties(0, {xspeed: 0, yspeed: 0, x: -1060, y: 0, color: "0xff3f34", cMask: 268435519, xgravity: 0, ygravity: 0});
				});
				sleep(3000).then(() => {
					room.setDiscProperties(3, {x: 0, y: 2000, radius: 0});
				});
			}
		}
	}
}


		function handleBallTouch() {
			var players = room.getPlayerList();
			var ballPosition = room.getBallPosition();
			var ballRadius = game.ballRadius;
			var playerRadius = 12;
			var triggerDistance = ballRadius + playerRadius + 0.01;
			
			for (var i = 0; i < players.length; i++) { // Iterate over all the players
				var player = players[i];
				if ( player.position == null ) continue;
				var distanceToBall = pointDistance(player.position, ballPosition);
				if ( distanceToBall < triggerDistance ) {		
					game.rsTouchTeam = player.team;
					game.throwinKicked = false;
					is_touch = player.id;
					var playerData = localStorage.getItem(player.name);
					if (playerData) {
						var data = JSON.parse(localStorage.getItem(player.name))
						if (game.powershotTrigger == false){
							if ( ball_color.hasOwnProperty(data.cur_maubong)){
								room.setDiscProperties(0, {color: ball_color[data.cur_maubong][1] });
							}
							
							else {
								room.setDiscProperties(0, {color: "0x9CF0E5"});
							}
						}
					}
					else if (playerData && game.powershotTrigger == false){
						room.setDiscProperties(0, {color: "0x9CF0E5"});
					}
					
					
					//=========== POWERSHOT CODE ===========
			if (game.rsCorner == false && game.rsGoalKick == false && game.outStatus != "blueThrow" && game.outStatus != "redThrow" && powerShotMode == true) {
				if (game.powershotID != player.id) {
					game.powershotID = player.id;
					game.powershotTrigger = false;
					game.powershotCounter = 0;
				} else {
					
					game.powershotCounter++;
					//room.sendAnnouncement("Powershot counter: " + game.powershotCounter, null, 0x333333, "small-bold", 0);
					if (game.powershotCounter > 0 && game.powershotCounter < 60 && game.powershotTrigger == false && Math.round(room.getDiscProperties(0).invMass) != 2) {
						room.setDiscProperties(0, {invMass: 1.2});
						game.powershotTrigger = true;
						
					}
					else if (game.powershotCounter > 85 && game.powershotCounter < 150) {
						room.setDiscProperties(0, {invMass: 1.5});
						room.setDiscProperties(0, {color: "0xffcc99"});
					}
					else if (game.powershotCounter > 150 && game.powershotCounter < 250) {
						room.setDiscProperties(0, {invMass: 1.7});
						room.setDiscProperties(0, {color: "0xffb366"});	

					}
					else if (game.powershotCounter > 250&& game.powershotCounter < 350 ) {
						room.setDiscProperties(0, {invMass: 2});
						room.setDiscProperties(0, {color: "0xff8c1a"});

					}
					else if (game.powershotCounter > 350 ) {
						room.setDiscProperties(0, {invMass: 2.2});

						room.setDiscProperties(0, {color: "0xcc6600"});	

					}
					
				}
			}
			//=========== POWERSHOT CODE ===========
			
			if (game.rsCorner == false && room.getDiscProperties(0).xgravity != 0) {
				room.setDiscProperties(0, {xgravity: 0, });
				game.rsSwingTimer = 10000;
			}
		} 
		is_touch = undefined
		//=========== POWERSHOT CODE ===========
		if ( distanceToBall > triggerDistance +3 && player.id == game.powershotID && game.powershotTrigger == true && powerShotMode == true) {
			game.powershotCounter = 0;
			game.powershotTrigger = false;
			game.powershotid = 0;
			if (parseFloat(room.getDiscProperties(0).invMass.toFixed(2)) != 1.05) {
				room.setDiscProperties(0, {invMass: 1.05});
				room.setDiscProperties(0, {color: "0xFFFFFF"});
				
			}
		}
		//=========== POWERSHOT CODE ===========
	}
}


		function updateGameStatus() {
			game.time = Math.floor(room.getScores().time);
			game.ballRadius = room.getDiscProperties(0).radius;
		}


		function announce(msg, targetId, color, style, sound) {
			if (color == null) {
				color = 0xFFFD82;
			}
			if (style == null) {
				style = "bold";
			}
			if (sound == null) {
				sound = 0;
			}
			room.sendAnnouncement(msg, targetId, color, style, sound);
			console.log("Announce: " + msg);
		}

		function whisper(msg, targetId, color, style, sound) {
			if (color == null) {
				color = 0x66C7FF;
			}
			if (style == null) {
				style = "normal";
			}
			if (sound == null) {
				sound = 0;
			}
			room.sendAnnouncement(msg, targetId, color, style, sound);
			if (room.getPlayer(targetId) != null) {
				console.log("Whisper -> " + room.getPlayer(targetId).name + ": " + msg);
			}
		}

		function isAdminPresent() {
			var players = room.getPlayerList();
			if (players.find((player) => player.admin) != null) {
				return true;
			}
			else {
				return false;
			}
		}

		function displayAdminMessage() {
			if (isAdminPresent() == false && allowPublicAdmin == true) {
				announce("No admin present: Type !admin to take control");
			}
		}

		function pointDistance(p1, p2) {
			var d1 = p1.x - p2.x;
			var d2 = p1.y - p2.y;
			return Math.sqrt(d1 * d1 + d2 * d2);
		}

		function sleep (time) {
		  return new Promise((resolve) => setTimeout(resolve, time));
		}
		function ballWarning(origColour, warningCount) {
	sleep(200).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: 0xFFA326});
		}
	});
	sleep(400).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(600).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: 0xFFA326});
		}
	});
	sleep(800).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1000).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: 0xFFA326});
		}
	});
	sleep(1200).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1400).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: 0xFFA326});
		}
	});
	sleep(1600).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
	sleep(1675).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: 0xFFA326});
		}
	});
	sleep(1750).then(() => {
		if (game.warningCount == warningCount) {
			room.setDiscProperties(0, {color: origColour});
		}
	});
}

function extraTime() {
	var extraSeconds = Math.ceil(game.extraTimeCount / 60);
	game.extraTimeEnd = (gameTime * 60) + extraSeconds;
	announce("Bù giờ: " + extraSeconds + " Giây", null, null, null, 1);
}

		function avatarCelebration(playerId, avatar) {
			room.setPlayerAvatar(playerId, avatar);
			sleep(250).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(500).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(750).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(1000).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(1250).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(1500).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(1750).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(2000).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(2250).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(2500).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(2750).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
			sleep(3000).then(() => {
				room.setPlayerAvatar(playerId, avatar);
			});
			sleep(3250).then(() => {
				room.setPlayerAvatar(playerId, null);
			});
		}

		function secondsToMinutes(time) {
			// Hours, minutes and seconds
			var hrs = ~~(time / 3600);
			var mins = ~~((time % 3600) / 60);
			var secs = ~~time % 60;

			// Output like "1:01" or "4:03:59" or "123:03:59"
			var ret = "";
			if (hrs > 0) {
				ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
			}
			ret += "" + mins + ":" + (secs < 10 ? "0" : "");
			ret += "" + secs;
			return ret;
		}
		function blockThrowIn() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().y < 0) { // top throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (room.getPlayerDiscProperties(player.id).invMass != 9999999) {
					room.setPlayerDiscProperties(player.id, {invMass: 9999999});
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -460) {
						room.setPlayerDiscProperties(player.id, {y: -445});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(17).x != 1149) { // show top red line
					room.setDiscProperties(17, {x: 1149});
				}
				if (room.getDiscProperties(19).x != -1149) { // hide top blue line
					room.setDiscProperties(19, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (room.getPlayerDiscProperties(player.id).invMass != 9999999) {
					room.setPlayerDiscProperties(player.id, {invMass: 9999999});
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y < -460) {
						room.setPlayerDiscProperties(player.id, {y: -445});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(19).x != 1149) { // show top blue line
					room.setDiscProperties(19, {x: 1149});
				}
				if (room.getDiscProperties(17).x != -1149) { // hide top red line
					room.setDiscProperties(17, {x: -1149});
				}
			});
		}
	}
	if (room.getBallPosition().y > 0) { // bottom throw line
		if (game.outStatus == "redThrow") {
			players.forEach(function(player) {
				if (room.getPlayerDiscProperties(player.id).invMass != 9999999) {
					room.setPlayerDiscProperties(player.id, {invMass: 9999999});
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 460) {
						room.setPlayerDiscProperties(player.id, {y: 445});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(21).x != 1149) { // show bottom red line
					room.setDiscProperties(21, {x: 1149});
				}
				if (room.getDiscProperties(23).x != -1149) { // hide bottom blue line
					room.setDiscProperties(23, {x: -1149});
				}
			});
		}
		if (game.outStatus == "blueThrow") {
			players.forEach(function(player) {
				if (room.getPlayerDiscProperties(player.id).invMass != 9999999) {
					room.setPlayerDiscProperties(player.id, {invMass: 9999999});
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).y > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 536870918) {
						room.setPlayerDiscProperties(player.id, {cGroup: 536870918});
					}
					if (player.position.y > 460) {
						room.setPlayerDiscProperties(player.id, {y: 445});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
				if (room.getDiscProperties(23).x != 1149) { // show bottom blue line
					room.setDiscProperties(23, {x: 1149});
				}
				if (room.getDiscProperties(21).x != -1149) { // hide bottom red line
					room.setDiscProperties(21, {x: -1149});
				}
			});
		}		
	}	
}


function blockGoalKick() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (room.getBallPosition().x < 0) { // left side red goal kick
		if (game.outStatus == "redGK") {
			players.forEach(function(player) {
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).x < 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x < -500 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: -485});
					}
				}
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}
	}
	if (room.getBallPosition().x > 0) { // right side blue goal kick
		if (game.outStatus == "blueGK") {
			players.forEach(function(player) {
				if (player.team == 1 && room.getPlayerDiscProperties(player.id).x > 0) {
					if (room.getPlayerDiscProperties(player.id).cGroup != 268435462) {
						room.setPlayerDiscProperties(player.id, {cGroup: 268435462});
					}
					if (player.position.x > 500 && player.position.y > -320 && player.position.y < 320) {
						room.setPlayerDiscProperties(player.id, {x: 485});
					}
				}
				if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
					room.setPlayerDiscProperties(player.id, {cGroup: 2});
				}
			});
		}		
	}	
}



function removeBlock() {
	var players = room.getPlayerList().filter((player) => player.team != 0);
	if (game.outStatus == "") {
		players.forEach(function(player) {
			if (player.team == 1 && room.getPlayerDiscProperties(player.id).cGroup != 2) {
				room.setPlayerDiscProperties(player.id, {cGroup: 2});
			}
			if (player.team == 2 && room.getPlayerDiscProperties(player.id).cGroup != 4) {
				room.setPlayerDiscProperties(player.id, {cGroup: 4});
			}
		});
		if (room.getDiscProperties(17).x != -1149) { // hide top red line
			room.setDiscProperties(17, {x: -1149});
		}
		if (room.getDiscProperties(19).x != -1149) { // hide top blue line
			room.setDiscProperties(19, {x: -1149});
		}
		if (room.getDiscProperties(21).x != -1149) { // hide bottom red line
			room.setDiscProperties(21, {x: -1149});
		}
		if (room.getDiscProperties(23).x != -1149) { // hide bottom blue line
			room.setDiscProperties(23, {x: -1149});
		}		
	}
}
		function endGame() {
			if (game.redScore > game.blueScore) {
				var players = room.getPlayerList().filter((player) => player.team != 0);
				players.forEach(function(player) {
					if (logged.includes(player.name)) {
						if (player.team == 1) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.win += 1;
							data.games +=1
							data.points += 3;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
						else if (player.team == 2) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.lose += 1;
							data.games += 1;
							data.points -= 5;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
					}
				});
			}
			else if (game.redScore < game.blueScore) {
				var players = room.getPlayerList().filter((player) => player.team != 0);
				players.forEach(function(player) {
					if (logged.includes(player.name)) {
						if (player.team == 2) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.win += 1;
							data.games += 1;
							data.points += 3;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
						else if (player.team == 1) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.lose += 1;
							data.games += 1;
							data.points -= 5;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
					}
				});
			}
			else if (game.redScore == game.blueScore) {
				var players = room.getPlayerList().filter((player) => player.team != 0);
				players.forEach(function(player) {
					if (logged.includes(player.name)) {
						if (player.team == 2) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.draw += 1;
							data.games += 1;
							data.points += 1;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
						else if (player.team == 1) {
							var data = JSON.parse(localStorage.getItem(player.name));
							data.draw += 1;
							data.games += 1;
							data.points += 1;
							localStorage.setItem(player.name,JSON.stringify(data));
						}
					}
				});
			}
		}
		// Rank E<100, 100 <= Rank D < 300, 300 <= Rank C < 500, 500 <= Rank B < 800, 800 <= Rank A < 1000, 1000<= Rank S
		function updateRank() {
			var players = room.getPlayerList().filter((player) => player.team != 0);
			players.forEach(function(player) {
				if (logged.includes(player.name)) {
					var data = JSON.parse(localStorage.getItem(player.name));
					console.log(data.points + "   BEFORE");
					data.points = (data.goals * 5) + (data.assists * 3) + (data.win * 3) + (data.lose * -5) + (data.owngoals * -4) + (data.draw * 1);
					console.log(data.points);
					if (data.points >= 0 && data.points < 100) {
						data.level = 'E';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
					else if (data.points >= 100 && data.points < 300) {
						data.level = 'D';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
					else if (data.points >= 300 && data.points < 500) {
						data.level = 'C';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
					else if (data.points >= 500 && data.points < 800) {
						data.level = 'B';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
					else if (data.points >= 800 && data.points < 1500) {
						data.level = 'A';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
					else if (data.points >= 1500) {
						data.level = 'S';
						localStorage.setItem(player.name, JSON.stringify(data));
					}
				}
			});
		}
		function getRandomInt(max) {
		  return Math.floor(Math.random() * max);
		}
		function playtaixiu(w) {
			taixiudangdienra = true;
			phien_taixiu +=1;
			announce("📢: Tài xỉu phiên thứ " + phien_taixiu + " đang diễn ra! 60s đếm ngược",null,0xFFCFCB);
			announce("📢: Nhập !tai [mức mược] hoặc !xiu [mức cược] để đặt tiền!",null,0xFFCFCB);
			setTimeout(taixiucore,60000);
		}
		var kq_taixiu;
		var taixiudangdienra = false;
		var taiPlayer = [];
		var xiuPlayer = [];
		var datcuoc_player = [];
		var phien_taixiu = 0;
		function taixiucore() {
			let x = getRandomInt(19);
			if (x >= 0  && x <10) {
				kq_taixiu = 'tai';
			}
			else {
				kq_taixiu= 'xiu';
			}
		if (kq_taixiu == 'tai') {
			announce("📢: Tài xỉu phiên thứ " + phien_taixiu + " ra Tài!!!",null,0xAADDEE);
			for (var i = 0; i < ids.length; i++) {
				if (taiPlayer[i] != null) {
					var p = room.getPlayerList().find(x => x.id == i);
					var data = JSON.parse(localStorage.getItem(p.name));
					data.money += (taiPlayer[i]*2);
                                                                           var tien_nhan_dc_tai = (taiPlayer[i]*2);
					localStorage.setItem(p.name,JSON.stringify(data));
					whisper("Bạn đã nhận được " + numberWithCommas(tien_nhan_dc_tai) + "đ khi chơi tài xỉu",p.id);
				} 
				else if (xiuPlayer[i] != null) {
					var p = room.getPlayerList().find(x => x.id == i);
					whisper("Bạn đã mất " + numberWithCommas(xiuPlayer[i]) + "đ khi chơi tài xỉu",p.id);
				}
			}
		}
		else if (kq_taixiu == 'xiu') {
			announce("📢: Tài xỉu phiên thứ " + phien_taixiu + " ra Xỉu!!!",null,0xAADDEE);
			for (var i = 0; i < ids.length; i++) {
				if (xiuPlayer[i] != null) {
					var p = room.getPlayerList().find(x => x.id == i);
					var data = JSON.parse(localStorage.getItem(p.name));
					data.money += (xiuPlayer[i]*2);
                                                                           var tien_nhan_dc_xiu = (xiuPlayer[i]*2)
					localStorage.setItem(p.name,JSON.stringify(data));
					whisper("Bạn đã nhận được " + numberWithCommas(tien_nhan_dc_xiu) + "đ khi chơi tài xỉu",p.id);
				} 
				else if (taiPlayer[i] != null) {
					var p = room.getPlayerList().find(x => x.id == i);
					whisper("Bạn đã mất " + numberWithCommas(taiPlayer[i]) + "đ khi chơi tài xỉu",p.id);
				}
			}
		}
		xiuPlayer = [];
		taixiudangdienra = false;
		taiPlayer = [];
		datcuoc_player = [];
		setTimeout(playtaixiu, 4000);
		}
		function numberWithCommas(x) {
			return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		}
		function addValue(target) {
			var playerData = localStorage.getItem(target);
			var data = JSON.parse(localStorage.getItem(target));
			if (playerData) {
				if (data.tuido == undefined) {
					let tuido = {
						'list_bietdanh' : [],
						'list_maubong' : [],
					}
					data.tuido = tuido;
				}
				if (data.cur_biet_danh == undefined) {
					let cur_biet_danh = '';
					let sth = JSON.parse(localStorage.getItem(target));
					data.cur_biet_danh = cur_biet_danh;
				}
				if (data.cur_mau_bong == undefined) {
					let cur_mau_bong = '';
					let sth = JSON.parse(localStorage.getItem(target));
					data.cur_mau_bong = cur_mau_bong;
				}
				if (data.cac_bietdanh == undefined) {
					let cac_bietdanh = [];
					data.cac_bietdanh = cac_bietdanh;
				}
				localStorage.setItem(target,JSON.stringify(data));
			}
		}
		var ball_color = {
			'tim': ['Màu Tím Mộng Mơ','0x9B59B6'],
			'xanhla': ['Màu xanh lá','0x28B463'],
			'xanhdam': ['Màu Xanh Nác Đậm','0x00A2FF'],
			'hong':['Màu Hồng Mạnh Mõe','0xff33ff'],
			'xanhsang':['Màu Xanh Mù Mắt','0x00ffff'],
			'do':['Màu Đỏ Gao Ồ','0xff0000'],
			'xanhnhat':['Màu xanh nước nhạt','0x85C1E9'],
			'xanhlanuoc':['Màu kết hợp xanh lá + nước','0x76D7C4'],
			'xanhlavang':['Màu Xanh Lá Vèng','0x58D68D'],
			'cam':['Màu Cam Shịt','0xE67E22'],
		}
		function Storage(target, key, value) {
			if (logged.includes(target.name)) {
				if (isString(key)) { 
					var key_do = key; 
					if (!isNaN(Number(value))) {
						var value_do = Number(value);
						var data = JSON.parse(localStorage.getItem(target.name));
						if (data[key_do] != undefined) {
							data[key_do] += value_do;
							localStorage.setItem(target.name, JSON.stringify(data));
						}
						else {
							whisper("Không có key này",target.id);
						}
					}
					else {
						whisper("Vui lòng nhập số",target.id);
					}
				}
			}
			else {
				announce("Vui lòng đăng nhập");
			}
		}
		function getData(target, key) {
			if (isString(key)) { 
				var key_do = key; 
				var data = JSON.parse(localStorage.getItem(target.name));
				if (data[key_do] != undefined) {
					return data[key_do];
				}
				else {
						announce("Không có key này");
				}
			}
		}
const isString = value => typeof value === 'string' || value instanceof String;